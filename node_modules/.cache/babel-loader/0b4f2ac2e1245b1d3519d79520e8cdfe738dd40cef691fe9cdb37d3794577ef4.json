{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { FigureNames } from \"./figures/Figure\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nimport { Znach } from \"./figures/Znach\";\nimport { sendGetMoveNext } from './bek';\nexport class Board {\n  //id: number = 0\n  //token: string = \"0\"\n\n  /*   \n     addDebuts() {\n         this.Debuts.push('1234')\n         this.Debuts.push('1234xcxfcgv')\n         this.Debuts.push('erygsb')\n         this.Debuts.push('0987654')\n         this.Debuts.push('098765421111111111')\n     }\n  */\n\n  initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null, null)); // черные\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null, null)); // белые\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n  getCopyBoard() {\n    const newBoard = new Board(); // новый объект доски\n    newBoard.cells = this.cells; // переносим ячейки\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.Debuts = this.Debuts;\n    newBoard.Boards = this.Boards;\n    newBoard.BoardsStr = this.BoardsStr;\n    newBoard.currentPlayer = this.currentPlayer;\n    //newBoard.token = this.token\n    return newBoard; // возвращаем уже новую доску\n  }\n  highlightCells(selecttedCell) {\n    // подсветка ячеек\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < row.length; j++) {\n        var _selecttedCell$figure;\n        const target = row[j]; // проходимся по всем ячейкам\n        target.available = !!(selecttedCell !== null && selecttedCell !== void 0 && (_selecttedCell$figure = selecttedCell.figure) !== null && _selecttedCell$figure !== void 0 && _selecttedCell$figure.canMove(target)); // меняем поле аваилибл !! к булиан приобразовывает\n        target.hodi = target.isHod();\n      }\n    }\n  }\n  highlightArrow(selecttedCell) {\n    // подсветка ячеек существующих ходов\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < row.length; j++) {\n        const target = row[j]; // проходимся по всем ячейкам\n        target.hodi = target.isHod();\n      }\n    }\n  }\n  swap() {\n    this.currentPlayer = this.currentPlayer === Colors.WHITE ? Colors.BLACK : Colors.WHITE;\n  }\n  NextM() {\n    const N = sendGetMoveNext(this.BoardsStr[this.BoardsStr.length - 1].id);\n    this.itMoves = N;\n    this.nextMoves = [];\n    for (let i = 0; i < N.length; i++) {\n      const newBoard = new Board();\n      newBoard.stringToBoard(N[i].positionAfter);\n      for (let j = 0; j < newBoard.cells.length; j++) {\n        for (let k = 0; k < newBoard.cells[j].length; k++) {\n          if (this.cells[j][k] !== newBoard.cells[j][k]) {\n            this.nextMoves.push({\n              x: k,\n              y: j\n            });\n          }\n        }\n      }\n    }\n  }\n  stringToBoard(str) {\n    let s = str.split(\" \");\n    let b = s[0].split(\"/\");\n    const newBoard = new Board();\n    newBoard.initCells(); //метод инициализации ячеек\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      let so = b[i];\n      let n = 0;\n      let j = 0;\n      for (let bukind = 0; bukind < so.length; bukind++) {\n        let isNumber = /^\\d+$/.test(so[bukind]);\n        if (isNumber) {\n          let nun = parseInt(so[bukind]);\n          for (let k = 0; k < nun; k++) {\n            newBoard.getCell(j, i).figure = null;\n            j++;\n          }\n        } else {\n          switch (so[bukind]) {\n            case \"b\":\n              new Bishop(Colors.BLACK, newBoard.getCell(j, i));\n              break;\n            case \"k\":\n              new King(Colors.BLACK, newBoard.getCell(j, i));\n              break;\n            case \"q\":\n              new Queen(Colors.BLACK, newBoard.getCell(j, i));\n              break;\n            case \"n\":\n              new Knight(Colors.BLACK, newBoard.getCell(j, i));\n              break;\n            case \"r\":\n              new Rook(Colors.BLACK, newBoard.getCell(j, i));\n              break;\n            case \"p\":\n              new Pawn(Colors.BLACK, newBoard.getCell(j, i));\n              break;\n            case \"B\":\n              new Bishop(Colors.WHITE, newBoard.getCell(j, i));\n              break;\n            case \"K\":\n              new King(Colors.WHITE, newBoard.getCell(j, i));\n              break;\n            case \"Q\":\n              new Queen(Colors.WHITE, newBoard.getCell(j, i));\n              break;\n            case \"N\":\n              new Knight(Colors.WHITE, newBoard.getCell(j, i));\n              break;\n            case \"R\":\n              new Rook(Colors.WHITE, newBoard.getCell(j, i));\n              break;\n            case \"P\":\n              new Pawn(Colors.WHITE, newBoard.getCell(j, i));\n              break;\n          }\n          j++;\n        }\n      }\n    }\n    newBoard.Debuts = this.Debuts;\n    newBoard.BoardsStr = this.BoardsStr;\n    return newBoard;\n  }\n  boardToString() {\n    let boardSTR = \"\";\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      let s = \"\";\n      let n = 0;\n      for (let j = 0; j < row.length; j++) {\n        const target = row[j]; // проходимся по всем ячейкам\n        if (target.figure) {\n          if (n !== 0) {\n            s = s + n;\n          }\n          n = 0;\n          if (target.figure.color === Colors.BLACK) {\n            switch (target.figure.name) {\n              case FigureNames.BISHOP:\n                s += \"b\";\n                break;\n              case FigureNames.KING:\n                s += \"k\";\n                break;\n              case FigureNames.QUEEN:\n                s += \"q\";\n                break;\n              case FigureNames.KNIGHT:\n                s += \"n\";\n                break;\n              case FigureNames.ROOK:\n                s += \"r\";\n                break;\n              case FigureNames.PAWN:\n                s += \"p\";\n                break;\n            }\n          } else {\n            switch (target.figure.name) {\n              case FigureNames.BISHOP:\n                s += \"B\";\n                break;\n              case FigureNames.KING:\n                s += \"K\";\n                break;\n              case FigureNames.QUEEN:\n                s += \"Q\";\n                break;\n              case FigureNames.KNIGHT:\n                s += \"N\";\n                break;\n              case FigureNames.ROOK:\n                s += \"R\";\n                break;\n              case FigureNames.PAWN:\n                s += \"P\";\n                break;\n            }\n          }\n        } else {\n          n++;\n          if (j === row.length - 1) {\n            s = s + n;\n          }\n        }\n      }\n      boardSTR += s;\n      if (!(i === this.cells.length - 1)) {\n        boardSTR += \"/\";\n      }\n    }\n    boardSTR += \" \";\n    let q = this.getCell(0, 0);\n    let Q = this.getCell(0, 7);\n    let k = this.getCell(7, 0);\n    let K = this.getCell(7, 7);\n    let king = this.getCell(4, 0);\n    let KING = this.getCell(4, 7);\n    let n = 0;\n    if (K && KING) {\n      var _K$figure, _KING$figure;\n      if ((_K$figure = K.figure) !== null && _K$figure !== void 0 && _K$figure.isFirstStep && (_KING$figure = KING.figure) !== null && _KING$figure !== void 0 && _KING$figure.isFirstStep) {\n        boardSTR += \"K\";\n        n++;\n      }\n    }\n    if (Q && KING) {\n      var _Q$figure, _KING$figure2;\n      if ((_Q$figure = Q.figure) !== null && _Q$figure !== void 0 && _Q$figure.isFirstStep && (_KING$figure2 = KING.figure) !== null && _KING$figure2 !== void 0 && _KING$figure2.isFirstStep) {\n        boardSTR += \"Q\";\n        n++;\n      }\n    }\n    if (k && king) {\n      var _k$figure, _king$figure;\n      if ((_k$figure = k.figure) !== null && _k$figure !== void 0 && _k$figure.isFirstStep && (_king$figure = king.figure) !== null && _king$figure !== void 0 && _king$figure.isFirstStep) {\n        boardSTR += \"k\";\n        n++;\n      }\n    }\n    if (q && king) {\n      var _q$figure, _king$figure2;\n      if ((_q$figure = q.figure) !== null && _q$figure !== void 0 && _q$figure.isFirstStep && (_king$figure2 = king.figure) !== null && _king$figure2 !== void 0 && _king$figure2.isFirstStep) {\n        boardSTR += \"q\";\n        n++;\n      }\n    }\n    if (n === 0) {\n      boardSTR += \"-\";\n    }\n    boardSTR += \" \";\n    return boardSTR;\n  }\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n    this.Debuts = [];\n    this.Boards = [];\n    this.BoardsStr = [];\n    this.numberHod = 0;\n    this.currentPlayer = Colors.WHITE;\n    this.nextMoves = [];\n    this.itMoves = [];\n  } //this.highlightCells();\n  getCell(x, y) {\n    // возвращаем элемент ячейку\n    return this.cells[y][x];\n  }\n  addPawns() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n  addKings() {\n    new King(Colors.BLACK, this.getCell(4, 0));\n    new King(Colors.WHITE, this.getCell(4, 7));\n  }\n  addBishop() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n  addKnight() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n  addQueen() {\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n  }\n  addRook() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n  addZnach() {\n    new Znach(\"1\", this.getCell(7, 7));\n  }\n  addFigures() {\n    this.addBishop();\n    this.addKings();\n    this.addKnight();\n    this.addPawns();\n    this.addRook();\n    this.addQueen();\n    //this.addZnach()\n    //this.addDebuts()\n  }\n}","map":{"version":3,"names":["Cell","Colors","Bishop","FigureNames","King","Knight","Pawn","Queen","Rook","Znach","sendGetMoveNext","Board","initCells","i","row","j","push","BLACK","WHITE","cells","getCopyBoard","newBoard","lostBlackFigures","lostWhiteFigures","Debuts","Boards","BoardsStr","currentPlayer","highlightCells","selecttedCell","length","_selecttedCell$figure","target","available","figure","canMove","hodi","isHod","highlightArrow","swap","NextM","N","id","itMoves","nextMoves","stringToBoard","positionAfter","k","x","y","str","s","split","b","so","n","bukind","isNumber","test","nun","parseInt","getCell","boardToString","boardSTR","color","name","BISHOP","KING","QUEEN","KNIGHT","ROOK","PAWN","q","Q","K","king","_K$figure","_KING$figure","isFirstStep","_Q$figure","_KING$figure2","_k$figure","_king$figure","_q$figure","_king$figure2","constructor","numberHod","addPawns","addKings","addBishop","addKnight","addQueen","addRook","addZnach","addFigures"],"sources":["/home/eva/Рабочий стол/reg/src/models/Board.ts"],"sourcesContent":["import App from \"../App\";\nimport {Cell} from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { Figure, FigureNames } from \"./figures/Figure\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nimport { Znach } from \"./figures/Znach\";\nimport { sendGetMoveNext } from './bek';\n\nexport class Board {\n    cells: Cell[][] = []\n    lostBlackFigures: Figure[] = []\n    lostWhiteFigures: Figure[] = []\n    Debuts: { id: number; name: string }[] = []\n    Boards: Board[] = []\n    BoardsStr: {str: string, id: number}[] = []\n    numberHod: number = 0\n    currentPlayer: Colors = Colors.WHITE\n    nextMoves: {x: number, y: number}[] = []\n    itMoves: {\n        id: number,\n        number: number,\n        treeId: number,\n        positionAfter: string,\n        nameMove: null | string,\n        colorWhite: boolean,\n        preventMove: number\n    }[] = []\n    //id: number = 0\n    //token: string = \"0\"\n\n\n /*   \n    addDebuts() {\n        this.Debuts.push('1234')\n        this.Debuts.push('1234xcxfcgv')\n        this.Debuts.push('erygsb')\n        this.Debuts.push('0987654')\n        this.Debuts.push('098765421111111111')\n    }\n*/\n\n    \n\n    public initCells() {\n        for(let i = 0; i < 8; i++) {\n            const row: Cell[] = []\n            for (let j = 0; j < 8; j++) {\n                if ((i + j) % 2 !== 0) {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null, null)) // черные\n                } else {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null, null)) // белые\n                }\n            }\n            this.cells.push(row);\n        }\n    }\n\n    public getCopyBoard(): Board {\n        const newBoard = new Board; // новый объект доски\n        newBoard.cells = this.cells; // переносим ячейки\n        newBoard.lostBlackFigures = this.lostBlackFigures\n        newBoard.lostWhiteFigures = this.lostWhiteFigures\n        newBoard.Debuts = this.Debuts\n        newBoard.Boards = this.Boards\n        newBoard.BoardsStr = this.BoardsStr\n        newBoard.currentPlayer = this.currentPlayer\n        //newBoard.token = this.token\n        return newBoard; // возвращаем уже новую доску\n    }\n\n    public highlightCells(selecttedCell: Cell | null) { // подсветка ячеек\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j]; // проходимся по всем ячейкам\n                target.available = !!selecttedCell?.figure?.canMove(target) // меняем поле аваилибл !! к булиан приобразовывает\n                target.hodi = target.isHod()\n            }\n        }\n    }\n\n    public highlightArrow(selecttedCell: Cell | null) { // подсветка ячеек существующих ходов\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j]; // проходимся по всем ячейкам\n                target.hodi = target.isHod()\n            }\n        }\n    }\n\n    public swap() {\n        this.currentPlayer = ((this.currentPlayer === Colors.WHITE) ? Colors.BLACK : Colors.WHITE)\n    }\n\n    public NextM() {\n        const N = sendGetMoveNext(this.BoardsStr[this.BoardsStr.length - 1].id)\n        this.itMoves = N;\n        this.nextMoves = [];\n        for (let i = 0; i < N.length; i++) {\n            const newBoard = new Board(); \n            newBoard.stringToBoard(N[i].positionAfter);\n            for(let j = 0; j < newBoard.cells.length; j++) {\n                for(let k = 0; k < newBoard.cells[j].length; k++) {\n                    if (this.cells[j][k] !== newBoard.cells[j][k]) {\n                        this.nextMoves.push({x: k, y: j});\n                    }\n                }\n            }\n        }\n    }\n\n    public stringToBoard(str: string) {\n        let s: string[] = str.split(\" \")\n        let b: string[] = s[0].split(\"/\")\n        const newBoard = new Board(); \n\n        newBoard.initCells() //метод инициализации ячеек\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            let so: string = b[i];\n            let n: number = 0;\n            let j = 0;\n            for (let bukind: number = 0; bukind < so.length; bukind++) {\n                let isNumber = /^\\d+$/.test(so[bukind])\n                if (isNumber) {\n                    let nun: number = parseInt(so[bukind])\n                    for (let k = 0; k < nun; k++) {newBoard.getCell(j, i).figure = null; j++;}\n                }\n                else {\n                    switch (so[bukind]) {\n                        case (\"b\"): new Bishop(Colors.BLACK, newBoard.getCell(j, i)); break;\n                        case (\"k\"): new King(Colors.BLACK, newBoard.getCell(j, i)); break;\n                        case (\"q\"): new Queen(Colors.BLACK, newBoard.getCell(j, i)); break;\n                        case (\"n\"): new Knight(Colors.BLACK, newBoard.getCell(j, i)); break;\n                        case (\"r\"): new Rook(Colors.BLACK, newBoard.getCell(j, i)); break;\n                        case (\"p\"): new Pawn(Colors.BLACK, newBoard.getCell(j, i)); break;\n                        case (\"B\"): new Bishop(Colors.WHITE, newBoard.getCell(j, i)); break;\n                        case (\"K\"): new King(Colors.WHITE, newBoard.getCell(j, i)); break;\n                        case (\"Q\"): new Queen(Colors.WHITE, newBoard.getCell(j, i)); break;\n                        case (\"N\"): new Knight(Colors.WHITE, newBoard.getCell(j, i)); break;\n                        case (\"R\"): new Rook(Colors.WHITE, newBoard.getCell(j, i)); break;\n                        case (\"P\"): new Pawn(Colors.WHITE, newBoard.getCell(j, i)); break;        \n                    }\n                    j++;\n                }\n            }  \n        }\n        newBoard.Debuts = this.Debuts;\n        newBoard.BoardsStr = this.BoardsStr\n        return newBoard;\n    }\n\n    public boardToString() {\n        let boardSTR: string = \"\";\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            let s: string = \"\";\n            let n: number = 0;\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j]; // проходимся по всем ячейкам\n                if (target.figure) {\n                    if (n !== 0) {s = s + n;}             \n                    n = 0;\n                    if (target.figure.color === Colors.BLACK) {\n                        switch (target.figure.name) {\n                            case (FigureNames.BISHOP): s += \"b\"; break;\n                            case (FigureNames.KING): s += \"k\"; break;\n                            case (FigureNames.QUEEN): s += \"q\"; break;\n                            case (FigureNames.KNIGHT): s += \"n\"; break;\n                            case (FigureNames.ROOK): s += \"r\"; break;\n                            case (FigureNames.PAWN): s += \"p\"; break;\n                        }\n                    } else {\n                        switch (target.figure.name) {\n                            case (FigureNames.BISHOP): s += \"B\"; break;\n                            case (FigureNames.KING): s += \"K\"; break;\n                            case (FigureNames.QUEEN): s += \"Q\"; break;\n                            case (FigureNames.KNIGHT): s += \"N\"; break;\n                            case (FigureNames.ROOK): s += \"R\"; break;\n                            case (FigureNames.PAWN): s += \"P\"; break;\n                        }\n                    }\n\n                } else {\n                    n++;\n                    if (j === row.length - 1) {\n                        s = s + n;\n                    }\n                }\n            }\n            boardSTR += s;\n            if (!(i === this.cells.length - 1)) {boardSTR += \"/\"}\n        }\n        boardSTR += \" \";\n        \n        let q: Cell = this.getCell(0, 0);\n        let Q: Cell = this.getCell(0, 7);\n        let k: Cell = this.getCell(7, 0);\n        let K: Cell = this.getCell(7, 7);\n        let king: Cell = this.getCell(4, 0);\n        let KING: Cell = this.getCell(4, 7);\n\n        let n: number = 0;\n\n        if(K && KING) {\n            if(K.figure?.isFirstStep && KING.figure?.isFirstStep) {\n                boardSTR += \"K\"; n++;\n            }\n        }\n        if(Q && KING) {\n            if(Q.figure?.isFirstStep && KING.figure?.isFirstStep) {\n                boardSTR += \"Q\"; n++;\n            }\n        }\n        if(k && king) {\n            if(k.figure?.isFirstStep && king.figure?.isFirstStep) {\n                boardSTR += \"k\"; n++;\n            }\n        }\n        if(q && king) {\n            if(q.figure?.isFirstStep && king.figure?.isFirstStep) {\n                boardSTR += \"q\"; n++;\n            }\n        }\n\n        if(n === 0) {boardSTR += \"-\";}\n\n        boardSTR += \" \";\n        return boardSTR;\n    }\n    \n    constructor(){\n        //this.highlightCells();\n    }\n\n    public getCell(x: number, y: number) { // возвращаем элемент ячейку\n        return this.cells[y][x]\n    }\n\n    private addPawns() {\n        for (let i = 0; i < 8; i++) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1))\n            new Pawn(Colors.WHITE, this.getCell(i, 6))\n        }\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(4, 0))\n        new King(Colors.WHITE, this.getCell(4, 7))\n    }\n\n    private addBishop() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0))\n        new Bishop(Colors.WHITE, this.getCell(2, 7))\n        new Bishop(Colors.BLACK, this.getCell(5, 0))\n        new Bishop(Colors.WHITE, this.getCell(5, 7))\n    }\n\n    private addKnight() {\n        new Knight(Colors.BLACK, this.getCell(1, 0))\n        new Knight(Colors.WHITE, this.getCell(1, 7))\n        new Knight(Colors.BLACK, this.getCell(6, 0))\n        new Knight(Colors.WHITE, this.getCell(6, 7))\n    }\n\n    private addQueen() {\n        new Queen(Colors.BLACK, this.getCell(3, 0))\n        new Queen(Colors.WHITE, this.getCell(3, 7))\n    }\n\n    private addRook() {\n        new Rook(Colors.BLACK, this.getCell(0, 0))\n        new Rook(Colors.WHITE, this.getCell(0, 7))\n        new Rook(Colors.BLACK, this.getCell(7, 0))\n        new Rook(Colors.WHITE, this.getCell(7, 7))\n    }\n\n    private addZnach() {\n        new Znach(\"1\", this.getCell(7, 7))\n    }\n\n    public addFigures() {\n        this.addBishop()\n        this.addKings()\n        this.addKnight()\n        this.addPawns()\n        this.addRook()\n        this.addQueen()\n        //this.addZnach()\n        //this.addDebuts()\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}