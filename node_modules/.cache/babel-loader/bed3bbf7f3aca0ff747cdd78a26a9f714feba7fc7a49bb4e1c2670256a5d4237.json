{"ast":null,"code":"var _jsxFileName = \"/home/eva/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/reg/src/components/BoardComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CellComponent from './CellComponent';\nimport { Modes } from '../models/Modes';\nimport { Colors } from '../models/Colors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//FC указывает что это функциональный компонент\nconst BoardComponent = ({\n  board,\n  setBoard,\n  swapPlayer,\n  mod,\n  boards\n}) => {\n  _s();\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [boardEnd, setBoardEnd] = useState(false);\n\n  // состояние, функция которая изменяет состояние. Тип в состоянии или ячейка или нулл\n\n  function click(cell) {\n    var _selectedCell$figure;\n    // аргумент ячейка, на которую нажали\n    // если у нас есть выбранная ячейка, на которой стоит фигура,  \n    // и эта ячейка не равняется той на которую мы хотим нажать\n    // и кэн мув возвращает тру\n    if (selectedCell && selectedCell !== cell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) {\n      var _currentPlayer;\n      // если содержит фигуру\n      selectedCell.moveFigure(cell); // то двигаем фигурку\n      swapPlayer(cell.board);\n      setSelectedCell(null); // меняем состояние\n      //updateBoard() // в видео он не нужен, а нам нужно обновить\n      //console.log(\"+++\")\n      //тут внимательно проверять очередность хода, если вызов функции переносить\n      board.Boards.push(cell.board.getCopyBoard());\n      let boardSTR = \"\";\n      boardSTR = cell.board.boardToString();\n      if (((_currentPlayer = currentPlayer) === null || _currentPlayer === void 0 ? void 0 : _currentPlayer.color) === Colors.WHITE) {\n        boardSTR += \"b\";\n      } else {\n        boardSTR += \"w\";\n      }\n      console.log({\n        boardSTR\n      });\n      board.BoardsStr.push(boardSTR);\n    } else {\n      var _cell$figure;\n      if (((_cell$figure = cell.figure) === null || _cell$figure === void 0 ? void 0 : _cell$figure.color) === cell.board.currentPlayer) {\n        setSelectedCell(cell);\n      }\n    }\n  }\n  useEffect(() => {\n    // чтобы реакт перерисовал компонент\n    highlightCells(); // вызывается на любое изменение ячейки\n  }, [selectedCell, boardEnd]);\n  function highlightCells() {\n    // выставление свойства аваэлибл, подсветка доступных ячеек\n    board.highlightCells(selectedCell); // подсветка необходимых ячеек\n    //board.highlightArrow(selectedCell)\n    updateBoard(); // перерисовываем доску\n  }\n  function updateBoard() {\n    // обновление состояния, при перерисовке доски вызывается\n    //board.highlightArrow(selectedCell)\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  }\n  const delet = () => {};\n  const back = () => {\n    if (board.Boards.length > 1) {\n      var _currentPlayer2;\n      board.Boards.pop();\n      //console.log(board.Boards.length)\n      const nBoard = board.Boards[board.Boards.length - 1];\n      console.log(board.BoardsStr.length);\n      const b = board.BoardsStr[0];\n      console.log(b);\n      setBoard(nBoard);\n      //setBoardEnd(!boardEnd)\n      let boardSTR = \"\";\n      boardSTR = nBoard.boardToString();\n      if (((_currentPlayer2 = currentPlayer) === null || _currentPlayer2 === void 0 ? void 0 : _currentPlayer2.color) === Colors.WHITE) {\n        boardSTR += \"b\";\n      } else {\n        boardSTR += \"w\";\n      }\n      //console.log({boardSTR})\n      //setSelectedCell(null);\n    }\n  };\n\n  //board.highlightArrow(selectedCell)\n  if (mod.mod === Modes.NULL || mod.mod === Modes.PLAY) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"choose\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0440\\u0435\\u0436\\u0438\\u043C \\u0438\\u0433\\u0440\\u044B \\u0438\\u043B\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0441\\u043E\\u0437\\u0434\\u0430\\u0439\\u0442\\u0435 \\u043D\\u043E\\u0432\\u044B\\u0439 \\u0434\\u0435\\u0431\\u044E\\u0442 (+)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0435\\u0439 \\u0438\\u0433\\u0440\\u043E\\u043A \", board.currentPlayer === Colors.WHITE ? \"Белый\" : \"Чёрный\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: board.cells.map((row, index) =>\n        /*#__PURE__*/\n        // индексом проходимся по ров индексами\n        //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n        _jsxDEV(React.Fragment, {\n          children: row.map(cell =>\n          /*#__PURE__*/\n          //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n          _jsxDEV(CellComponent, {\n            treehod: cell.isHod(),\n            click: click,\n            cell: cell\n\n            //z={cell.znach}\n            ,\n\n            // для элемента массива нужно указывать ключ\n            selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n            // если текущая и выбранная равны\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 29\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => delet(),\n        className: \"Delete\",\n        children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0442\\u0435\\u043A\\u0443\\u0449\\u0443\\u044E \\u0432\\u0435\\u0442\\u043A\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => back(),\n        className: \"Back\",\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(BoardComponent, \"M7GLBUTQE2M7+DdKPQC2gA+O1/Q=\");\n_c = BoardComponent;\nexport default BoardComponent;\nvar _c;\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useEffect","useState","CellComponent","Modes","Colors","jsxDEV","_jsxDEV","BoardComponent","board","setBoard","swapPlayer","mod","boards","_s","selectedCell","setSelectedCell","boardEnd","setBoardEnd","click","cell","_selectedCell$figure","figure","canMove","_currentPlayer","moveFigure","Boards","push","getCopyBoard","boardSTR","boardToString","currentPlayer","color","WHITE","console","log","BoardsStr","_cell$figure","highlightCells","updateBoard","newBoard","delet","back","length","_currentPlayer2","pop","nBoard","b","NULL","PLAY","className","children","fileName","_jsxFileName","lineNumber","columnNumber","cells","map","row","index","Fragment","treehod","isHod","selected","x","y","id","onClick","_c","$RefreshReg$"],"sources":["/home/eva/Рабочий стол/reg/src/components/BoardComponent.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport { Board } from '../models/Board';\nimport CellComponent from './CellComponent';\nimport { Cell } from '../models/Cell';\nimport { Player } from '../models/Player';\nimport { Modes } from '../models/Modes';\nimport { Mod } from '../models/Mod';\nimport DebutsMake from './DebutsMake';\nimport { Colors } from '../models/Colors';\n\n\ninterface BoardProps { //интерфейс ожидаемых пропсов\n    board: Board;\n    setBoard: (board: Board) => void; // функция которой можно изменить доску!!!!!!!!\n    //currentPlayer: Player | null;\n    swapPlayer: (board: Board) => void;\n    mod: Mod;\n    boards: string[];\n}\n\n//FC указывает что это функциональный компонент\nconst BoardComponent: FC<BoardProps> = ({board, setBoard, swapPlayer, mod, boards}) => {\n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\n    const [boardEnd, setBoardEnd] = useState<boolean>(false);\n\n    // состояние, функция которая изменяет состояние. Тип в состоянии или ячейка или нулл\n\n    function click(cell: Cell) { // аргумент ячейка, на которую нажали\n        // если у нас есть выбранная ячейка, на которой стоит фигура,  \n        // и эта ячейка не равняется той на которую мы хотим нажать\n        // и кэн мув возвращает тру\n        if (selectedCell && selectedCell !== cell && selectedCell.figure?.canMove(cell)) { // если содержит фигуру\n            selectedCell.moveFigure(cell); // то двигаем фигурку\n            swapPlayer(cell.board)\n            setSelectedCell(null); // меняем состояние\n            //updateBoard() // в видео он не нужен, а нам нужно обновить\n            //console.log(\"+++\")\n            //тут внимательно проверять очередность хода, если вызов функции переносить\n            board.Boards.push(cell.board.getCopyBoard())\n            let boardSTR: string = \"\";\n            boardSTR = cell.board.boardToString();\n            if(currentPlayer?.color === Colors.WHITE) {boardSTR += \"b\"}\n            else {boardSTR += \"w\"}\n            console.log({boardSTR})\n            board.BoardsStr.push(boardSTR)\n        }\n        else {\n            if(cell.figure?.color === cell.board.currentPlayer) {\n                setSelectedCell(cell);\n            }     \n        }\n    }\n\n    \n    \n\n    useEffect(() => { // чтобы реакт перерисовал компонент\n        highlightCells() // вызывается на любое изменение ячейки\n\n    }, [selectedCell, boardEnd])\n\n    function highlightCells() { // выставление свойства аваэлибл, подсветка доступных ячеек\n        board.highlightCells(selectedCell) // подсветка необходимых ячеек\n        //board.highlightArrow(selectedCell)\n        updateBoard() // перерисовываем доску\n    }\n\n    function updateBoard() { // обновление состояния, при перерисовке доски вызывается\n        //board.highlightArrow(selectedCell)\n        const newBoard = board.getCopyBoard()\n        setBoard(newBoard)\n    }\n\n\n\n    const delet = () => {\n        \n    }\n\n    const back = () => {\n        \n        \n        if (board.Boards.length > 1) {\n            board.Boards.pop()\n            //console.log(board.Boards.length)\n            const nBoard: Board = board.Boards[board.Boards.length - 1]\n\n            console.log(board.BoardsStr.length)\n            const b: string = board.BoardsStr[0]\n            console.log(b)\n\n            setBoard(nBoard)\n            //setBoardEnd(!boardEnd)\n            let boardSTR: string = \"\";\n            boardSTR = nBoard.boardToString();\n            if(currentPlayer?.color === Colors.WHITE) {boardSTR += \"b\"}\n            else {boardSTR += \"w\"}\n            //console.log({boardSTR})\n            //setSelectedCell(null);\n        }\n        \n    }\n\n    //board.highlightArrow(selectedCell)\n    if ((mod.mod === Modes.NULL) || (mod.mod === Modes.PLAY)) {\n        return ( \n        <div className='choose'>\n\n        <h1>Выберите режим игры или</h1>\n        <h1>создайте новый дебют (+)</h1>\n\n        </div> \n        );\n    }\n\n  return (\n    <div>\n        \n\n            <div>\n\n            <h3>Текущей игрок {(board.currentPlayer === Colors.WHITE) ? \"Белый\" : \"Чёрный\"}</h3>\n            <div className=\"board\">\n                {board.cells.map((row, index) => // индексом проходимся по ров индексами\n                    //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n                    <React.Fragment key={index}>\n                                \n                        {row.map(cell => //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n                            <CellComponent\n                                treehod={cell.isHod()}\n                                click={click}\n                                cell={cell}\n                                \n                                //z={cell.znach}\n                                key={cell.id} // для элемента массива нужно указывать ключ\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\n                                // если текущая и выбранная равны\n                            />\n                        )}\n                    </React.Fragment>\n                )}\n            </div>\n            <button onClick={() => delet()} className=\"Delete\">Удалить текущую ветку</button>\n            <button onClick={() => back()} className=\"Back\">Назад</button>\n\n        </div>\n\n    \n\n    </div>\n  );\n};\n\nexport default BoardComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}