{"ast":null,"code":"/*export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n    const url = 'http://localhost:8080/user'; // Замените на ваш локальный URL\n\n    const requestBody = {\n        login: login,\n        password: password,\n    };\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n\n        // Проверяем, был ли запрос успешным\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // Предполагаем, что в ответе есть поле id\n        console.log('aaaaaaaaaaa');\n        console.log(data.id);\n        return data.id; // Возвращаем id из ответа\n    } catch (error) {\n        console.error('Error occurred during the POST request:', error);\n        return null; // Возвращаем null в случае ошибки\n    }\n}\n\n// Пример вызова функции\nsendLoginRequest('yourLogin', 'yourPassword')\n    .then(id => {\n        if (id !== null) {\n            console.log('Received ID:', id);\n        } else {\n            console.log('Failed to retrieve ID.');\n        }\n    });\n*/\n\nimport axios from 'axios';\n\n// Определяем интерфейс для ожидаемого ответа от сервера\n\n// Функция для отправки POST-запроса\nexport async function sendLoginRequest(login, password) {\n  const url = 'http://localhost:9000/user'; // Замените на ваш URL\n\n  try {\n    // Отправка POST-запроса с данными\n    const response = await axios.post(url, {\n      login: login,\n      password: password\n    });\n\n    // Обрабатываем ответ и возвращаем id\n    console.log('aaaaaaaaaaa');\n    console.log(response.data.id);\n    return response.data.id;\n  } catch (error) {\n    // Обработка ошибок\n    console.error('Error sending the request:', error);\n\n    // Возвращаем null в случае ошибки\n    return null;\n  }\n}","map":{"version":3,"names":["axios","sendLoginRequest","login","password","url","response","post","console","log","data","id","error"],"sources":["/home/eva/Рабочий стол/reg/src/models/bek.ts"],"sourcesContent":["/*export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n    const url = 'http://localhost:8080/user'; // Замените на ваш локальный URL\n\n    const requestBody = {\n        login: login,\n        password: password,\n    };\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n\n        // Проверяем, был ли запрос успешным\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // Предполагаем, что в ответе есть поле id\n        console.log('aaaaaaaaaaa');\n        console.log(data.id);\n        return data.id; // Возвращаем id из ответа\n    } catch (error) {\n        console.error('Error occurred during the POST request:', error);\n        return null; // Возвращаем null в случае ошибки\n    }\n}\n\n// Пример вызова функции\nsendLoginRequest('yourLogin', 'yourPassword')\n    .then(id => {\n        if (id !== null) {\n            console.log('Received ID:', id);\n        } else {\n            console.log('Failed to retrieve ID.');\n        }\n    });\n*/\n\n    import axios from 'axios';\n\n    // Определяем интерфейс для ожидаемого ответа от сервера\n    interface ServerResponse {\n        id: number; // Предполагаем, что id – это число\n        // Вы можете добавить тут другие поля, если это необходимо\n        login: string,\n        password: string\n    }\n    \n    // Функция для отправки POST-запроса\n    export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n        const url = 'http://localhost:9000/user'; // Замените на ваш URL\n    \n        try {\n            // Отправка POST-запроса с данными\n            const response = await axios.post<ServerResponse>(url, {\n                login: login,\n                password: password,\n            });\n    \n            // Обрабатываем ответ и возвращаем id\n            console.log('aaaaaaaaaaa');\n            console.log(response.data.id);\n            return response.data.id;\n        } catch (error) {\n            // Обработка ошибок\n            console.error('Error sending the request:', error);\n            \n            // Возвращаем null в случае ошибки\n            return null;\n        }\n    }\n    \n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AAQA;AACA,OAAO,eAAeC,gBAAgBA,CAACC,KAAa,EAAEC,QAAgB,EAA0B;EAC5F,MAAMC,GAAG,GAAG,4BAA4B,CAAC,CAAC;;EAE1C,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAiBF,GAAG,EAAE;MACnDF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACd,CAAC,CAAC;;IAEF;IACAI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BD,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAACC,EAAE,CAAC;IAC7B,OAAOL,QAAQ,CAACI,IAAI,CAACC,EAAE;EAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ;IACAJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;;IAElD;IACA,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}