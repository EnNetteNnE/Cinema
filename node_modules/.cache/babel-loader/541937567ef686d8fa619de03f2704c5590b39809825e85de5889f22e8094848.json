{"ast":null,"code":"var _jsxFileName = \"/home/eva/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/reg/src/components/BoardComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CellComponent from './CellComponent';\nimport { Modes } from '../models/Modes';\nimport DebutsMake from './DebutsMake';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//FC указывает что это функциональный компонент\nconst BoardComponent = ({\n  board,\n  setBoard,\n  currentPlayer,\n  swapPlayer,\n  mod\n}) => {\n  _s();\n  const [selectedCell, setSelectedCell] = useState(null);\n  // состояние, функция которая изменяет состояние. Тип в состоянии или ячейка или нулл\n\n  function click(cell) {\n    var _selectedCell$figure;\n    // аргумент ячейка, на которую нажали\n    // если у нас есть выбранная ячейка, на которой стоит фигура,  \n    // и эта ячейка не равняется той на которую мы хотим нажать\n    // и кэн мув возвращает тру\n    if (selectedCell && selectedCell !== cell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) {\n      // если содержит фигуру\n      selectedCell.moveFigure(cell); // то двигаем фигурку\n      swapPlayer();\n      setSelectedCell(null); // меняем состояние\n      updateBoard(); // в видео он не нужен, а нам нужно обновить\n    } else {\n      var _cell$figure;\n      if (((_cell$figure = cell.figure) === null || _cell$figure === void 0 ? void 0 : _cell$figure.color) === (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color)) {\n        setSelectedCell(cell);\n      }\n    }\n  }\n  function clickUp(mod) {\n    mod.mod = Modes.CLICK;\n  }\n  useEffect(() => {\n    // чтобы реакт перерисовал компонент\n    highlightCells(); // вызывается на любое изменение ячейки\n    clickUp(mod);\n  }, [selectedCell, DebutsMake]);\n  function highlightCells() {\n    // выставление свойства аваэлибл, подсветка доступных ячеек\n    board.highlightCells(selectedCell); // подсветка необходимых ячеек\n    updateBoard(); // перерисовываем доску\n  }\n  function updateBoard() {\n    // обновление состояния, при перерисовке доски вызывается\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  }\n  if (mod.mod === Modes.NULL) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0440\\u0435\\u0436\\u0438\\u043C \\u0438\\u0433\\u0440\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0438\\u043B\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0441\\u043E\\u0437\\u0434\\u0430\\u0439\\u0442\\u0435 \\u043D\\u043E\\u0432\\u044B\\u0439 \\u0434\\u0435\\u0431\\u044E\\u0442 (+)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this);\n  } else if (mod.mod === Modes.CLICK) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0440\\u0435\\u0436\\u0438\\u043C \\u0438\\u0433\\u0440\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0435\\u0439 \\u0438\\u0433\\u0440\\u043E\\u043A \", currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: board.cells.map((row, index) =>\n        /*#__PURE__*/\n        // индексом проходимся по ров индексами\n        //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n        _jsxDEV(React.Fragment, {\n          children: row.map(cell =>\n          /*#__PURE__*/\n          //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n          _jsxDEV(CellComponent, {\n            treehod: cell.isHod(),\n            click: click,\n            cell: cell\n\n            //z={cell.znach}\n            ,\n\n            // для элемента массива нужно указывать ключ\n            selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n            // если текущая и выбранная равны\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0435\\u0439 \\u0438\\u0433\\u0440\\u043E\\u043A \", currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(BoardComponent, \"OFVjm5mk704+5WCzFQLJg89Ag6Q=\");\n_c = BoardComponent;\nexport default BoardComponent;\nvar _c;\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useEffect","useState","CellComponent","Modes","DebutsMake","jsxDEV","_jsxDEV","BoardComponent","board","setBoard","currentPlayer","swapPlayer","mod","_s","selectedCell","setSelectedCell","click","cell","_selectedCell$figure","figure","canMove","moveFigure","updateBoard","_cell$figure","color","clickUp","CLICK","highlightCells","newBoard","getCopyBoard","NULL","children","fileName","_jsxFileName","lineNumber","columnNumber","className","cells","map","row","index","Fragment","treehod","isHod","selected","x","y","id","_c","$RefreshReg$"],"sources":["/home/eva/Рабочий стол/reg/src/components/BoardComponent.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport { Board } from '../models/Board';\nimport CellComponent from './CellComponent';\nimport { Cell } from '../models/Cell';\nimport { Player } from '../models/Player';\nimport { Modes } from '../models/Modes';\nimport { Mod } from '../models/Mod';\nimport DebutsMake from './DebutsMake';\n\n\ninterface BoardProps { //интерфейс ожидаемых пропсов\n    board: Board;\n    setBoard: (board: Board) => void; // функция которой можно изменить доску!!!!!!!!\n    currentPlayer: Player | null;\n    swapPlayer: () => void;\n    mod: Mod;\n}\n\n//FC указывает что это функциональный компонент\nconst BoardComponent: FC<BoardProps> = ({board, setBoard, currentPlayer, swapPlayer, mod}) => {\n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\n    // состояние, функция которая изменяет состояние. Тип в состоянии или ячейка или нулл\n\n    function click(cell: Cell) { // аргумент ячейка, на которую нажали\n        // если у нас есть выбранная ячейка, на которой стоит фигура,  \n        // и эта ячейка не равняется той на которую мы хотим нажать\n        // и кэн мув возвращает тру\n        if (selectedCell && selectedCell !== cell && selectedCell.figure?.canMove(cell)) { // если содержит фигуру\n            selectedCell.moveFigure(cell); // то двигаем фигурку\n            swapPlayer()\n            setSelectedCell(null); // меняем состояние\n            updateBoard() // в видео он не нужен, а нам нужно обновить\n        }\n        else {\n            if(cell.figure?.color === currentPlayer?.color) {\n                setSelectedCell(cell);\n            }     \n        }\n    }\n\n    function clickUp(mod: Mod) {\n        mod.mod = Modes.CLICK;\n    }\n\n    \n\n    useEffect(() => { // чтобы реакт перерисовал компонент\n        highlightCells() // вызывается на любое изменение ячейки\n        clickUp(mod)\n    }, [selectedCell, DebutsMake])\n\n    function highlightCells() { // выставление свойства аваэлибл, подсветка доступных ячеек\n        board.highlightCells(selectedCell) // подсветка необходимых ячеек\n        updateBoard() // перерисовываем доску\n    }\n\n    function updateBoard() { // обновление состояния, при перерисовке доски вызывается\n        const newBoard = board.getCopyBoard()\n        setBoard(newBoard)\n    }\n\n    if ((mod.mod === Modes.NULL)) {\n        return ( \n        <div>\n\n        <h1>Выберите режим игры</h1>\n        <h1>или</h1>\n        <h1>создайте новый дебют (+)</h1>\n\n        </div> \n        );\n    } else if ((mod.mod === Modes.CLICK)) {\n        return ( \n        <div>\n\n        <h1>Выберите режим игры</h1>\n\n        </div> \n        );\n    }\n\n  return (\n    <div>\n        \n\n            <div>\n\n            <h3>Текущей игрок {currentPlayer?.color}</h3>\n            <div className=\"board\">\n                {board.cells.map((row, index) => // индексом проходимся по ров индексами\n                    //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n                    <React.Fragment key={index}>\n                                \n                        {row.map(cell => //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n                            <CellComponent\n                                treehod={cell.isHod()}\n                                click={click}\n                                cell={cell}\n                                \n                                //z={cell.znach}\n                                key={cell.id} // для элемента массива нужно указывать ключ\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\n                                // если текущая и выбранная равны\n                            />\n                        )}\n                    </React.Fragment>\n                )}\n            </div>\n            <h3>Текущей игрок {currentPlayer?.color}</h3>\n\n        </div>\n\n    \n\n    </div>\n  );\n};\n\nexport default BoardComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}