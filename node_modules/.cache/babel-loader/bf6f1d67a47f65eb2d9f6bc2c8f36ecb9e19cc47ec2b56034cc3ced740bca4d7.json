{"ast":null,"code":"import { Colors } from \"./Colors\";\nimport { FigureNames } from \"./figures/Figure\";\nexport class Cell {\n  // для реакт ключей\n\n  constructor(board, x, y, color, figure, znach) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.znach = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    // Можешь ли переместиться\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.znach = znach;\n    this.board = board;\n    this.available = false;\n    this.id = Math.random();\n  }\n  isEmpty() {\n    return this.figure === null;\n  }\n  isEnemy(target) {\n    if (target.figure) {\n      var _this$figure;\n      return ((_this$figure = this.figure) === null || _this$figure === void 0 ? void 0 : _this$figure.color) !== target.figure.color;\n    }\n    return false;\n  }\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n    for (let y = min + 1; y < max; y++) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) {\n      return false;\n    }\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n    for (let x = min + 1; x < max; x++) {\n      if (!this.board.getCell(x, this.y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(target.x - this.x);\n    const absY = Math.abs(target.y - this.y);\n    if (absY !== absX) return false;\n    const dy = this.y < target.y ? 1 : -1;\n    const dx = this.x < target.x ? 1 : -1;\n    for (let i = 1; i < absY; i++) {\n      if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) return false;\n    }\n    return true;\n  }\n  setFigure(figure) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n  addLostFigure(figure) {\n    figure.color === Colors.BLACK ? this.board.lostBlackFigures.push(figure) : this.board.lostWhiteFigures.push(figure);\n  }\n  moveFigure(target) {\n    var _this$figure2, _target$figure, _this$figure3, _this$figure4;\n    if (this.figure && (_this$figure2 = this.figure) !== null && _this$figure2 !== void 0 && _this$figure2.canMove(target) && ((_target$figure = target.figure) === null || _target$figure === void 0 ? void 0 : _target$figure.name) === FigureNames.ROOK && ((_this$figure3 = this.figure) === null || _this$figure3 === void 0 ? void 0 : _this$figure3.name) === FigureNames.KING) {\n      if (target.x === 0) {\n        // тут рокировка тут мы ничего не сьедаем ууууууу\n        let targetKing = this.board.getCell(2, this.y);\n        let targetRook = this.board.getCell(3, this.y);\n        this.figure.moveFigure(target);\n        targetKing.figure = this.figure;\n        this.figure = null;\n        targetRook.figure = target.figure;\n        target.figure = null;\n      } else if (target.x === 7) {\n        let targetKing = this.board.getCell(6, this.y);\n        let targetRook = this.board.getCell(5, this.y);\n        this.figure.moveFigure(target);\n        targetKing.figure = this.figure;\n        this.figure = null;\n        targetRook.figure = target.figure;\n        target.figure = null;\n      }\n    } else if (this.figure && (_this$figure4 = this.figure) !== null && _this$figure4 !== void 0 && _this$figure4.canMove(target)) {\n      this.figure.moveFigure(target); //чисто шобы посчитать что это первый ход\n      if (target.figure) {\n        this.addLostFigure(target.figure);\n      }\n      target.setFigure(this.figure); //добавление на таргет ячейку\n      this.figure = null; //удаление фигуры с текущей ячейки\n    }\n  }\n}","map":{"version":3,"names":["Colors","FigureNames","Cell","constructor","board","x","y","color","figure","znach","available","id","Math","random","isEmpty","isEnemy","target","_this$figure","isEmptyVertical","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dy","dx","i","setFigure","cell","addLostFigure","BLACK","lostBlackFigures","push","lostWhiteFigures","moveFigure","_this$figure2","_target$figure","_this$figure3","_this$figure4","canMove","name","ROOK","KING","targetKing","targetRook"],"sources":["/home/eva/Рабочий стол/chess-app/src/models/Cell.ts"],"sourcesContent":["import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\";\nimport { Board } from \"./Board\";\nimport { Colors } from \"./Colors\";\nimport { Figure, FigureNames } from \"./figures/Figure\";\nimport { Znach } from \"./figures/Znach\";\n\nexport class Cell {\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    figure: Figure | null;\n    znach: Znach | null;\n    board: Board;\n    available: boolean; // Можешь ли переместиться\n    id: number; // для реакт ключей\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null, znach: Znach | null) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.figure = figure;\n        this.znach = znach;\n        this.board = board;\n        this.available = false;\n        this.id = Math.random()\n    }\n\n    isEmpty(): boolean {\n        return this.figure === null;\n    }\n\n    isEnemy(target: Cell): boolean {\n        if (target.figure) {\n            return this.figure?.color !== target.figure.color;\n        }\n        return false;\n    }\n\n    isEmptyVertical(target: Cell): boolean {\n        if(this.x !== target.x) {\n            return false;\n        }\n\n        const min = Math.min(this.y, target.y);\n        const max = Math.max(this.y, target.y);\n        for(let y = min + 1; y < max; y++) {\n            if(!this.board.getCell(this.x, y).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isEmptyHorizontal(target: Cell): boolean {\n        if(this.y !== target.y) {\n            return false;\n        }\n\n        const min = Math.min(this.x, target.x);\n        const max = Math.max(this.x, target.x);\n        for(let x = min + 1; x < max; x++) {\n            if(!this.board.getCell(x, this.y).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isEmptyDiagonal(target: Cell): boolean {\n        const absX = Math.abs(target.x - this.x);\n        const absY = Math.abs(target.y - this.y);\n        if(absY !== absX)\n            return false;\n\n        const dy = this.y < target.y ? 1 : -1\n        const dx = this.x < target.x ? 1 : -1\n\n        for(let i = 1; i < absY; i++) {\n            if(!this.board.getCell(this.x + dx*i, this.y + dy*i).isEmpty())\n                return false;\n        }\n        return true;\n    }\n\n    setFigure(figure: Figure) {\n        this.figure = figure;\n        this.figure.cell = this;\n    }\n\n    addLostFigure(figure:Figure) {\n        figure.color === Colors.BLACK ? this.board.lostBlackFigures.push(figure) : this.board.lostWhiteFigures.push(figure)\n    }\n\n    moveFigure(target: Cell) {\n       \n        if(this.figure && this.figure?.canMove(target) && (target.figure?.name === FigureNames.ROOK) && (this.figure?.name === FigureNames.KING)) {\n\n\n            if(target.x === 0) { // тут рокировка тут мы ничего не сьедаем ууууууу\n                let targetKing = this.board.getCell(2, this.y);\n                let targetRook = this.board.getCell(3, this.y);\n\n                this.figure.moveFigure(target)  \n                targetKing.figure = (this.figure);\n                this.figure = null; \n                targetRook.figure = (target.figure);\n                target.figure = null;                            \n            }\n            else if(target.x === 7) {\n                let targetKing = this.board.getCell(6, this.y);\n                let targetRook = this.board.getCell(5, this.y);\n\n                this.figure.moveFigure(target)  \n                targetKing.figure = (this.figure);\n                this.figure = null; \n                targetRook.figure = (target.figure);\n                target.figure = null;  \n            }\n            \n        }\n\n        else if(this.figure && this.figure?.canMove(target)) {\n            this.figure.moveFigure(target)  //чисто шобы посчитать что это первый ход\n            if(target.figure) {\n                this.addLostFigure(target.figure);\n            }\n            target.setFigure(this.figure); //добавление на таргет ячейку\n            this.figure = null; //удаление фигуры с текущей ячейки\n        }\n    }\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}