{"ast":null,"code":"import { Colors } from \"./Colors\";\nimport { FigureNames } from \"./figures/Figure\";\nexport class Cell {\n  // для реакт ключей\n\n  constructor(board, x, y, color, figure, znach) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.znach = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    // Можешь ли переместиться\n    this.hodi = void 0;\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.znach = znach;\n    this.board = board;\n    this.available = false;\n    this.id = Math.random();\n    this.hodi = false;\n  }\n  isEmpty() {\n    return this.figure === null;\n  }\n  isEnemy(target) {\n    // проверяет что на таргете фигура противника\n    if (target.figure) {\n      var _this$figure;\n      return ((_this$figure = this.figure) === null || _this$figure === void 0 ? void 0 : _this$figure.color) !== target.figure.color;\n    }\n    return false;\n  }\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n    for (let y = min + 1; y < max; y++) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) {\n      return false;\n    }\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n    for (let x = min + 1; x < max; x++) {\n      if (!this.board.getCell(x, this.y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(target.x - this.x);\n    const absY = Math.abs(target.y - this.y);\n    if (absY !== absX) return false;\n    const dy = this.y < target.y ? 1 : -1;\n    const dx = this.x < target.x ? 1 : -1;\n    for (let i = 1; i < absY; i++) {\n      if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) return false;\n    }\n    return true;\n  }\n  setFigure(figure) {\n    //меняем фигуру для самой фигуры\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n  addLostFigure(figure) {\n    figure.color === Colors.BLACK ? this.board.lostBlackFigures.push(figure) : this.board.lostWhiteFigures.push(figure);\n  }\n  isHod() {\n    if (this.isEmpty()) {\n      return true;\n    }\n    return false;\n  }\n  moveFigure(target) {\n    var _this$figure2, _target$figure, _this$figure3, _this$figure4;\n    // перемещаем фигуру на ячейку\n\n    if (this.figure && (_this$figure2 = this.figure) !== null && _this$figure2 !== void 0 && _this$figure2.canMove(target) && ((_target$figure = target.figure) === null || _target$figure === void 0 ? void 0 : _target$figure.name) === FigureNames.ROOK && ((_this$figure3 = this.figure) === null || _this$figure3 === void 0 ? void 0 : _this$figure3.name) === FigureNames.KING && this.figure.color === target.figure.color) {\n      if (target.x === 0) {\n        // тут рокировка тут мы ничего не съедаем ууууууу\n        let targetKing = this.board.getCell(2, this.y);\n        let targetRook = this.board.getCell(3, this.y);\n        this.figure.moveFigure(target);\n        targetKing.setFigure(this.figure);\n        this.figure = null;\n        targetRook.setFigure(target.figure);\n        target.figure = null;\n      } else if (target.x === 7) {\n        let targetKing = this.board.getCell(6, this.y);\n        let targetRook = this.board.getCell(5, this.y);\n        this.figure.moveFigure(target);\n        targetKing.setFigure(this.figure);\n        this.figure = null;\n        targetRook.setFigure(target.figure);\n        target.figure = null;\n      }\n    } else if (this.figure && (_this$figure4 = this.figure) !== null && _this$figure4 !== void 0 && _this$figure4.canMove(target)) {\n      this.figure.moveFigure(target); //чисто шобы посчитать что это первый ход\n      if (target.figure) {\n        this.addLostFigure(target.figure);\n      }\n      target.setFigure(this.figure); //добавление на таргет ячейку\n      this.figure = null; //удаление фигуры с текущей ячейки\n    }\n    //this.board.addDebuts();\n  }\n}","map":{"version":3,"names":["Colors","FigureNames","Cell","constructor","board","x","y","color","figure","znach","available","hodi","id","Math","random","isEmpty","isEnemy","target","_this$figure","isEmptyVertical","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dy","dx","i","setFigure","cell","addLostFigure","BLACK","lostBlackFigures","push","lostWhiteFigures","isHod","moveFigure","_this$figure2","_target$figure","_this$figure3","_this$figure4","canMove","name","ROOK","KING","targetKing","targetRook"],"sources":["/home/eva/Рабочий стол/reg/src/models/Cell.ts"],"sourcesContent":["import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\";\nimport { Board } from \"./Board\";\nimport { Colors } from \"./Colors\";\nimport { Figure, FigureNames } from \"./figures/Figure\";\nimport { Znach } from \"./figures/Znach\";\n\nexport class Cell {\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    figure: Figure | null;\n    znach: Znach | null;\n    board: Board;\n    available: boolean; // Можешь ли переместиться\n    hodi: boolean;\n    id: number; // для реакт ключей\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null, znach: Znach | null) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.figure = figure;\n        this.znach = znach;\n        this.board = board;\n        this.available = false;\n        this.id = Math.random()\n        this.hodi = false;\n    }\n\n    isEmpty(): boolean {\n        return this.figure === null;\n    }\n\n    isEnemy(target: Cell): boolean { // проверяет что на таргете фигура противника\n        if (target.figure) {\n            return this.figure?.color !== target.figure.color;\n        }\n        return false;\n    }\n\n    isEmptyVertical(target: Cell): boolean {\n        if(this.x !== target.x) {\n            return false;\n        }\n\n        const min = Math.min(this.y, target.y);\n        const max = Math.max(this.y, target.y);\n        for(let y = min + 1; y < max; y++) {\n            if(!this.board.getCell(this.x, y).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isEmptyHorizontal(target: Cell): boolean {\n        if(this.y !== target.y) {\n            return false;\n        }\n\n        const min = Math.min(this.x, target.x);\n        const max = Math.max(this.x, target.x);\n        for(let x = min + 1; x < max; x++) {\n            if(!this.board.getCell(x, this.y).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isEmptyDiagonal(target: Cell): boolean {\n        const absX = Math.abs(target.x - this.x);\n        const absY = Math.abs(target.y - this.y);\n        if(absY !== absX)\n            return false;\n\n        const dy = this.y < target.y ? 1 : -1\n        const dx = this.x < target.x ? 1 : -1\n\n        for(let i = 1; i < absY; i++) {\n            if(!this.board.getCell(this.x + dx*i, this.y + dy*i).isEmpty())\n                return false;\n        }\n        return true;\n    }\n\n    setFigure(figure: Figure) { //меняем фигуру для самой фигуры\n        this.figure = figure;\n        this.figure.cell = this;\n    }\n\n    addLostFigure(figure:Figure) {\n        figure.color === Colors.BLACK ? this.board.lostBlackFigures.push(figure) : this.board.lostWhiteFigures.push(figure)\n    }\n\n    isHod() : boolean {\n        if (this.isEmpty()) {\n            return true\n        }\n        return false;\n    }\n\n    moveFigure(target: Cell) { // перемещаем фигуру на ячейку\n       \n        if(this.figure && this.figure?.canMove(target) && (target.figure?.name === FigureNames.ROOK) && (this.figure?.name === FigureNames.KING) && (this.figure.color === target.figure.color)) {\n\n\n            if(target.x === 0) { // тут рокировка тут мы ничего не съедаем ууууууу\n                let targetKing = this.board.getCell(2, this.y);\n                let targetRook = this.board.getCell(3, this.y);\n\n                this.figure.moveFigure(target)  \n                targetKing.setFigure(this.figure);\n                this.figure = null; \n                targetRook.setFigure(target.figure);\n                target.figure = null;                            \n            }\n            else if(target.x === 7) {\n                let targetKing = this.board.getCell(6, this.y);\n                let targetRook = this.board.getCell(5, this.y);\n\n                this.figure.moveFigure(target)  \n                targetKing.setFigure(this.figure);\n                this.figure = null; \n                targetRook.setFigure(target.figure);\n                target.figure = null;  \n            }\n            \n        }\n\n        else if(this.figure && this.figure?.canMove(target)) {\n            this.figure.moveFigure(target)  //чисто шобы посчитать что это первый ход\n            if(target.figure) {\n                this.addLostFigure(target.figure);\n            }\n            target.setFigure(this.figure); //добавление на таргет ячейку\n            this.figure = null; //удаление фигуры с текущей ячейки\n        }\n        //this.board.addDebuts();\n    }\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}