{"ast":null,"code":"export function sendPostUser(login, password) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/user';\n  const requestBody = {\n    login: login,\n    password: password\n  };\n\n  // Создаем объект с данными для отправки\n  const data = JSON.stringify(requestBody);\n\n  // Инициализируем запрос\n  xhr.open('POST', url, false);\n\n  // Устанавливаем заголовок для отправки JSON\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  // Отправляем запрос\n  xhr.send(data);\n\n  // Парсим ответ в JSON\n  const response = JSON.parse(xhr.responseText);\n  // Возвращаем значение поля id\n\n  return response.id;\n}\nexport function sendPostUserToken(login, password) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/user/token';\n  const requestBody = {\n    login: login,\n    password: password\n  };\n\n  // Создаем объект с данными для отправки\n  const data = JSON.stringify(requestBody);\n\n  // Инициализируем запрос\n  xhr.open('POST', url, false);\n\n  // Устанавливаем заголовок для отправки JSON\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  // Отправляем запрос\n  xhr.send(data);\n\n  // Возвращаем ответ как строку\n  return xhr.responseText;\n}\nexport function sendPostTree(name, token) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/tree';\n  const requestBody = {\n    name: name\n  };\n\n  // Создаем объект с данными для отправки\n  const data = JSON.stringify(requestBody);\n\n  // Инициализируем запрос\n  xhr.open('POST', url, false);\n\n  // Устанавливаем заголовок для токена\n  xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Устанавливаем заголовок для отправки JSON\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  // Отправляем запрос\n  xhr.send(data);\n\n  // Парсим ответ в JSON\n  const response = JSON.parse(xhr.responseText);\n  // Возвращаем значение поля id\n\n  console.log(\"asasasas\", response.id);\n  return response.id;\n}\nexport function sendGetTree(token) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/tree';\n\n  // Инициализируем запрос\n  xhr.open('GET', url, false);\n\n  // Устанавливаем заголовок для токена\n  xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Отправляем запрос\n  xhr.send();\n\n  // Парсим ответ в JSON и возвращаем массив объектов\n  return JSON.parse(xhr.responseText);\n}\nexport function sendGetMoveTree(treeId) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/move/tree/' + treeId;\n\n  // Инициализируем запрос\n  xhr.open('GET', url, false);\n\n  // Отправляем запрос\n  xhr.send();\n  const response = JSON.parse(xhr.responseText);\n  // Возвращаем значение поля id\n\n  return response.id;\n}\nexport function sendGetMoveNext(idMove) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/move/next/' + idMove;\n\n  // Инициализируем запрос\n  xhr.open('GET', url, false);\n\n  // Отправляем запрос\n  xhr.send();\n\n  // Парсим ответ в JSON и возвращаем массив объектов\n  return JSON.parse(xhr.responseText);\n}\nexport function sendGetMoveRandom(idMove) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/move/random/' + idMove;\n\n  // Инициализируем запрос\n  xhr.open('GET', url, false); // false делает запрос синхронным\n\n  // Отправляем запрос\n  xhr.send();\n\n  // Парсим ответ в JSON и возвращаем массив объектов\n  return JSON.parse(xhr.responseText);\n}\nexport function sendPostMove(treeId, positionAfter, preventMoveId, colorWhite, token) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/move'; // Замените на ваш URL\n\n  const requestBody = {\n    treeId: treeId,\n    positionAfter: positionAfter,\n    preventMoveId: preventMoveId,\n    colorWhite: colorWhite\n  };\n\n  // Создаем объект с данными для отправки\n  const data = JSON.stringify(requestBody);\n\n  // Инициализируем запрос\n  xhr.open('POST', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для токена\n  xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Устанавливаем заголовок для отправки JSON\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  // Отправляем запрос\n  xhr.send(data);\n\n  // Парсим ответ в JSON\n  const response = JSON.parse(xhr.responseText);\n  // Возвращаем значение поля id\n\n  //console.log('aaaaaaaaaaa');\n  //console.log(response.id);\n  console.log(\"asasasas\", response.id);\n  return response.id; // Предполагается, что id - это число\n}\nexport function sendDeleteUserToken(token) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/user/token'; // Замените на ваш URL\n\n  // Инициализируем запрос\n  xhr.open('DELETE', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для токена\n  xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Отправляем запрос\n  xhr.send();\n\n  // Парсим ответ в JSON и возвращаем массив объектов\n  return 0; // Предполагается, что ответ - это массив объектов\n}\nexport function hashPassword(input) {\n  // MD5\n\n  let hash = 0;\n  for (let i = 0; i < input.length; i++) {\n    hash = (hash << 5) - hash + input.charCodeAt(i); // hash * 31 + charCode\n    hash |= 0; // Приведение к 32-битному знаковому числу\n  }\n\n  // Преобразуем хэш в строку в шестнадцатеричном формате\n  let result = Math.abs(hash).toString(16);\n  return result.substring(0, 40);\n}\n\n/*      \n// Пример использования\nconst password = 'my_secure_password';\nconst hashed = hashPassword(password);\nconsole.log(`Хэшированный пароль: ${hashed}`);\n    // Пример использования\n   try {\n       const token = 'your_token_here'; // Замените на ваш токен\n       const dataArray = sendGetRequest(token);\n       console.log('Data:', dataArray);\n   } catch (error) {\n       console.error(error);\n   }\n \n   // Пример использования\n   try {\n       const responseString = sendPostRequest('myLogin', 'myPassword');\n       console.log('Response:', responseString);\n   } catch (error) {\n       console.error(error);\n   }\n        // Пример использования\n   try {\n       const userId = sendPostRequest('myLogin', 'myPassword');\n       console.log('User  ID:', userId);\n   } catch (error) {\n       console.error(error);\n   }\n*/","map":{"version":3,"names":["sendPostUser","login","password","xhr","XMLHttpRequest","url","requestBody","data","JSON","stringify","open","setRequestHeader","send","response","parse","responseText","id","sendPostUserToken","sendPostTree","name","token","console","log","sendGetTree","sendGetMoveTree","treeId","sendGetMoveNext","idMove","sendGetMoveRandom","sendPostMove","positionAfter","preventMoveId","colorWhite","sendDeleteUserToken","hashPassword","input","hash","i","length","charCodeAt","result","Math","abs","toString","substring"],"sources":["/home/eva/Рабочий стол/reg/src/models/bek.ts"],"sourcesContent":["\n\n\n        export function sendPostUser(login: string, password: string): number {\n            const xhr = new XMLHttpRequest();\n            const url = 'http://localhost:8080/user'; \n\n            const requestBody = {\n                login: login,\n                password: password,\n            };\n        \n            // Создаем объект с данными для отправки\n            const data = JSON.stringify(requestBody);\n        \n            // Инициализируем запрос\n            xhr.open('POST', url, false); \n        \n            // Устанавливаем заголовок для отправки JSON\n            xhr.setRequestHeader('Content-Type', 'application/json');\n        \n            // Отправляем запрос\n            xhr.send(data);\n        \n            \n                // Парсим ответ в JSON\n                const response = JSON.parse(xhr.responseText);\n                // Возвращаем значение поля id\n\n                return response.id; \n            \n        }\n\n\n\n\n        export function sendPostUserToken(login: string, password: string): string {\n            const xhr = new XMLHttpRequest();\n            const url = 'http://localhost:8080/user/token'; \n\n            const requestBody = {\n                login: login,\n                password: password,\n            };\n        \n            // Создаем объект с данными для отправки\n            const data = JSON.stringify(requestBody);\n        \n            // Инициализируем запрос\n            xhr.open('POST', url, false); \n        \n            // Устанавливаем заголовок для отправки JSON\n            xhr.setRequestHeader('Content-Type', 'application/json');\n        \n            // Отправляем запрос\n            xhr.send(data);\n        \n                // Возвращаем ответ как строку\n            return xhr.responseText; \n\n        }\n\n\n        export function sendPostTree(name: string, token: string): number {\n            const xhr = new XMLHttpRequest();\n            const url = 'http://localhost:8080/tree'; \n\n            const requestBody = {\n                name: name\n            };\n        \n            // Создаем объект с данными для отправки\n            const data = JSON.stringify(requestBody);\n        \n            // Инициализируем запрос\n            xhr.open('POST', url, false); \n\n\n            // Устанавливаем заголовок для токена\n            xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n            // Устанавливаем заголовок для отправки JSON\n            xhr.setRequestHeader('Content-Type', 'application/json');\n        \n            // Отправляем запрос\n            xhr.send(data);\n        \n            \n                // Парсим ответ в JSON\n                const response = JSON.parse(xhr.responseText);\n                // Возвращаем значение поля id\n\n\n                console.log(\"asasasas\", response.id)\n                return response.id; \n            \n        }\n\n        export function sendGetTree(token: string): { id: number; name: string }[] {\n            const xhr = new XMLHttpRequest();\n            const url = 'http://localhost:8080/tree'; \n        \n            // Инициализируем запрос\n            xhr.open('GET', url, false); \n        \n            // Устанавливаем заголовок для токена\n            xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n        \n            // Отправляем запрос\n            xhr.send();\n        \n                // Парсим ответ в JSON и возвращаем массив объектов\n            return JSON.parse(xhr.responseText); \n            \n        }\n\n        export function sendGetMoveTree(treeId: number): number {\n            const xhr = new XMLHttpRequest();\n            const url = 'http://localhost:8080/move/tree/' + treeId; \n        \n            // Инициализируем запрос\n            xhr.open('GET', url, false); \n        \n        \n            // Отправляем запрос\n            xhr.send();\n        \n            const response = JSON.parse(xhr.responseText);\n                // Возвращаем значение поля id\n\n            return response.id; \n            \n        }\n\n        export function sendGetMoveNext(idMove: number): {\n            id: number,\n            number: number,\n            treeId: number,\n            positionAfter: string,\n            nameMove: null | string,\n            colorWhite: boolean,\n            preventMove: number\n        }[] {\n            const xhr = new XMLHttpRequest();\n            const url = 'http://localhost:8080/move/next/' + idMove; \n        \n            // Инициализируем запрос\n            xhr.open('GET', url, false); \n        \n            // Отправляем запрос\n            xhr.send();\n        \n                // Парсим ответ в JSON и возвращаем массив объектов\n            return JSON.parse(xhr.responseText); \n            \n        }\n\n        export function sendGetMoveRandom(idMove: number): {\n            id: number,\n            number: number,\n            treeId: number,\n            positionAfter: string,\n            nameMove: null | string,\n            colorWhite: boolean,\n            preventMove: number\n        } {\n            const xhr = new XMLHttpRequest();\n            const url = 'http://localhost:8080/move/random/' + idMove; \n        \n            // Инициализируем запрос\n            xhr.open('GET', url, false); // false делает запрос синхронным\n        \n            // Отправляем запрос\n            xhr.send();\n        \n                // Парсим ответ в JSON и возвращаем массив объектов\n            return JSON.parse(xhr.responseText); \n            \n        }\n\n\n        export function sendPostMove(treeId: number, positionAfter: string, preventMoveId: number, colorWhite: boolean, token: string): number {\n            const xhr = new XMLHttpRequest();\n            const url = 'http://localhost:8080/move'; // Замените на ваш URL\n\n            const requestBody = {\n                treeId: treeId,\n                positionAfter: positionAfter,\n                preventMoveId: preventMoveId,\n                colorWhite: colorWhite\n            }\n        \n            // Создаем объект с данными для отправки\n            const data = JSON.stringify(requestBody);\n        \n            // Инициализируем запрос\n            xhr.open('POST', url, false); // false делает запрос синхронным\n\n\n            // Устанавливаем заголовок для токена\n            xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n            // Устанавливаем заголовок для отправки JSON\n            xhr.setRequestHeader('Content-Type', 'application/json');\n        \n            // Отправляем запрос\n            xhr.send(data);\n        \n            \n                // Парсим ответ в JSON\n                const response = JSON.parse(xhr.responseText);\n                // Возвращаем значение поля id\n\n                //console.log('aaaaaaaaaaa');\n                //console.log(response.id);\n                console.log(\"asasasas\", response.id)\n                return response.id; // Предполагается, что id - это число\n            \n        }\n\n        export function sendDeleteUserToken(token: string) {\n            const xhr = new XMLHttpRequest();\n            const url = 'http://localhost:8080/user/token'; // Замените на ваш URL\n        \n            // Инициализируем запрос\n            xhr.open('DELETE', url, false); // false делает запрос синхронным\n        \n            // Устанавливаем заголовок для токена\n            xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n        \n            // Отправляем запрос\n            xhr.send();\n        \n                // Парсим ответ в JSON и возвращаем массив объектов\n            return 0; // Предполагается, что ответ - это массив объектов\n            \n        }\n\n\nexport function hashPassword(input: string): string { // MD5\n\n    let hash = 0;\n    for (let i = 0; i < input.length; i++) {\n        hash = (hash << 5) - hash + input.charCodeAt(i); // hash * 31 + charCode\n        hash |= 0; // Приведение к 32-битному знаковому числу\n    }\n\n    // Преобразуем хэш в строку в шестнадцатеричном формате\n    let result = Math.abs(hash).toString(16);\n    return result.substring(0, 40);\n}\n\n     /*      \n// Пример использования\nconst password = 'my_secure_password';\nconst hashed = hashPassword(password);\nconsole.log(`Хэшированный пароль: ${hashed}`);\n\n        // Пример использования\n        try {\n            const token = 'your_token_here'; // Замените на ваш токен\n            const dataArray = sendGetRequest(token);\n            console.log('Data:', dataArray);\n        } catch (error) {\n            console.error(error);\n        }\n\n     \n        // Пример использования\n        try {\n            const responseString = sendPostRequest('myLogin', 'myPassword');\n            console.log('Response:', responseString);\n        } catch (error) {\n            console.error(error);\n        }\n    \n        // Пример использования\n        try {\n            const userId = sendPostRequest('myLogin', 'myPassword');\n            console.log('User  ID:', userId);\n        } catch (error) {\n            console.error(error);\n        }\n    */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}