{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n  }\n  initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null, null)); // черные\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null, null)); // белые\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n  getCopyBoard() {\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    return newBoard;\n  }\n  highlightCells(selecttedCell) {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < row.length; j++) {\n        var _selecttedCell$figure;\n        const target = row[j];\n        target.available = !!(selecttedCell !== null && selecttedCell !== void 0 && (_selecttedCell$figure = selecttedCell.figure) !== null && _selecttedCell$figure !== void 0 && _selecttedCell$figure.canMove(target));\n      }\n    }\n  }\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n  addPawns() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n  addKings() {\n    new King(Colors.BLACK, this.getCell(4, 0));\n    new King(Colors.WHITE, this.getCell(4, 7));\n  }\n  addBishop() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n  addKnight() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n  addQueen() {\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n  }\n  addRook() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n  addZnach() {\n    for (let i = 0; i < 8; i++) {}\n  }\n  addFigures() {\n    this.addBishop();\n    this.addKings();\n    this.addKnight();\n    this.addPawns();\n    this.addRook();\n    this.addQueen();\n  }\n}","map":{"version":3,"names":["Cell","Colors","Bishop","King","Knight","Pawn","Queen","Rook","Board","constructor","cells","lostBlackFigures","lostWhiteFigures","initCells","i","row","j","push","BLACK","WHITE","getCopyBoard","newBoard","highlightCells","selecttedCell","length","_selecttedCell$figure","target","available","figure","canMove","getCell","x","y","addPawns","addKings","addBishop","addKnight","addQueen","addRook","addZnach","addFigures"],"sources":["/home/eva/Рабочий стол/chess-app/src/models/Board.ts"],"sourcesContent":["import {Cell} from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { Figure } from \"./figures/Figure\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\n\nexport class Board {\n    cells: Cell[][] = []\n    lostBlackFigures: Figure[] = []\n    lostWhiteFigures: Figure[] = []\n\n\n    public initCells() {\n        for(let i = 0; i < 8; i++) {\n            const row: Cell[] = []\n            for (let j = 0; j < 8; j++) {\n                if ((i + j) % 2 !== 0) {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null, null)) // черные\n                } else {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null, null)) // белые\n                }\n            }\n            this.cells.push(row);\n        }\n    }\n\n    public getCopyBoard(): Board {\n        const newBoard = new Board;\n        newBoard.cells = this.cells;\n        newBoard.lostBlackFigures = this.lostBlackFigures\n        newBoard.lostWhiteFigures = this.lostWhiteFigures\n        return newBoard;\n    }\n\n    public highlightCells(selecttedCell: Cell | null) {\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j];\n                target.available = !!selecttedCell?.figure?.canMove(target)\n            }\n        }\n    }\n\n    public getCell(x: number, y: number) {\n        return this.cells[y][x]\n    }\n\n    private addPawns() {\n        for (let i = 0; i < 8; i++) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1))\n            new Pawn(Colors.WHITE, this.getCell(i, 6))\n        }\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(4, 0))\n        new King(Colors.WHITE, this.getCell(4, 7))\n    }\n\n    private addBishop() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0))\n        new Bishop(Colors.WHITE, this.getCell(2, 7))\n        new Bishop(Colors.BLACK, this.getCell(5, 0))\n        new Bishop(Colors.WHITE, this.getCell(5, 7))\n    }\n\n    private addKnight() {\n        new Knight(Colors.BLACK, this.getCell(1, 0))\n        new Knight(Colors.WHITE, this.getCell(1, 7))\n        new Knight(Colors.BLACK, this.getCell(6, 0))\n        new Knight(Colors.WHITE, this.getCell(6, 7))\n    }\n\n    private addQueen() {\n        new Queen(Colors.BLACK, this.getCell(3, 0))\n        new Queen(Colors.WHITE, this.getCell(3, 7))\n    }\n\n    private addRook() {\n        new Rook(Colors.BLACK, this.getCell(0, 0))\n        new Rook(Colors.WHITE, this.getCell(0, 7))\n        new Rook(Colors.BLACK, this.getCell(7, 0))\n        new Rook(Colors.WHITE, this.getCell(7, 7))\n    }\n\n    private addZnach() {\n        for(let i = 0; i < 8; i++) {\n            \n        }\n    }\n\n    public addFigures() {\n        this.addBishop()\n        this.addKings()\n        this.addKnight()\n        this.addPawns()\n        this.addRook()\n        this.addQueen()\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}