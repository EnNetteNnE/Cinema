{"ast":null,"code":"var _jsxFileName = \"/home/eva/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/reg/src/components/BoardComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CellComponent from './CellComponent';\nimport { Modes } from '../models/Modes';\nimport { Colors } from '../models/Colors';\nimport CellComponentForPlay from './CellCompoForPlay';\nimport { sendGetMoveRandom } from '../models/bek';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//FC указывает что это функциональный компонент\nconst BoardComponent = ({\n  board,\n  setBoard,\n  swapPlayer,\n  mod,\n  boards,\n  currentPlayer,\n  token\n}) => {\n  _s();\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [boardEnd, setBoardEnd] = useState(false);\n  const [hod, setHod] = useState(false);\n\n  // состояние, функция которая изменяет состояние. Тип в состоянии или ячейка или нулл\n\n  function click(cell) {\n    var _selectedCell$figure;\n    // аргумент ячейка, на которую нажали\n    // если у нас есть выбранная ячейка, на которой стоит фигура,  \n    // и эта ячейка не равняется той на которую мы хотим нажать\n    // и кэн мув возвращает тру\n    if (selectedCell && selectedCell !== cell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) {\n      // если содержит фигуру\n      selectedCell.moveFigure(cell); // то двигаем фигурку\n      //cell.board.swap()\n      swapPlayer();\n      setSelectedCell(null); // меняем состояние\n      //updateBoard() // в видео он не нужен, а нам нужно обновить\n      //console.log(\"+++\")\n      //тут внимательно проверять очередность хода, если вызов функции переносить\n\n      let boardSTR = \"\";\n      boardSTR = cell.board.boardToString();\n      if ((currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color) === Colors.WHITE) {\n        boardSTR += \"b\";\n      } else {\n        boardSTR += \"w\";\n      }\n      let id = cell.board.MoveTo(boardSTR, mod.debut.id, token);\n      //тут нужна функция чтобы проверить а есть ли такая строчка вообще, и если есть, то вернуть просто её id, а если нет, то всё забить в бэк и вернуть id\n      console.log({\n        boardSTR\n      });\n      board.BoardsStr.push({\n        str: boardSTR,\n        id: id\n      }); /////Ева, обрати сюда внимание, раскоменти эту строчку, тут FEN\n      cell.board.NextM();\n      //board.Boards.push(cell.board)\n    } else {\n      var _cell$figure;\n      if (((_cell$figure = cell.figure) === null || _cell$figure === void 0 ? void 0 : _cell$figure.color) === (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color)) {\n        setSelectedCell(cell);\n      }\n    }\n  }\n  function clickByPlay(cell) {\n    var _selectedCell$figure2;\n    if (selectedCell && selectedCell !== cell && (_selectedCell$figure2 = selectedCell.figure) !== null && _selectedCell$figure2 !== void 0 && _selectedCell$figure2.canMove(cell)) {\n      // если содержит фигуру\n      selectedCell.moveFigure(cell); // то двигаем фигурку\n\n      let boardSTR = \"\";\n      boardSTR = cell.board.boardToString();\n      if ((currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color) === Colors.WHITE) {\n        boardSTR += \"b\";\n      } else {\n        boardSTR += \"w\";\n      }\n\n      //функция тут нужна, которая проверит есть ли такой ход, и если есть возвращает его id и строку а если нет то вернёт 0\n      let bod = cell.board.HodWhy(boardSTR);\n      cell.board.BoardsStr.push({\n        str: bod.str,\n        id: bod.id\n      });\n      if (bod.id === 0) {\n        //тут состояние, чтобы вывелось что такого хода нет и откатить назад\n        setHod(true);\n        back();\n      } else {\n        // тут берем рандомный ход и перерисовываем доску\n        let Hod = sendGetMoveRandom(bod.id);\n        const bor = board.stringToBoard(Hod.positionAfter);\n        cell.board.BoardsStr.push({\n          str: Hod.positionAfter,\n          id: Hod.id\n        });\n        setBoard(bor);\n        cell.board = bor;\n        setHod(false);\n      }\n\n      //let id = cell.board.MoveTo(boardSTR, mod.debut.id, token);\n\n      //console.log({boardSTR})\n      //board.BoardsStr.push({str: boardSTR, id: id}) /////Ева, обрати сюда внимание, раскоменти эту строчку, тут FEN\n      //cell.board.NextM()//тут нужна функция чтобы проверить а есть ли такая строчка вообще, и если есть, то вернуть просто её id, а если нет, то всё забить в бэк и вернуть id\n      setSelectedCell(null); // меняем состояние\n    } else {\n      var _cell$figure2;\n      if (((_cell$figure2 = cell.figure) === null || _cell$figure2 === void 0 ? void 0 : _cell$figure2.color) === (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color)) {\n        setSelectedCell(cell);\n      }\n    }\n  }\n  useEffect(() => {\n    // чтобы реакт перерисовал компонент\n    highlightCells(); // вызывается на любое изменение ячейки\n  }, [selectedCell, boardEnd]);\n  function highlightCells() {\n    // выставление свойства аваэлибл, подсветка доступных ячеек\n    board.highlightCells(selectedCell); // подсветка необходимых ячеек\n    //board.highlightArrow(selectedCell)\n    updateBoard(); // перерисовываем доску\n  }\n  function updateBoard() {\n    // обновление состояния, при перерисовке доски вызывается\n    //board.highlightArrow(selectedCell)\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  }\n  const delet = () => {\n    //отправляем на бэк сообщение об уалении ветки\n    back();\n  };\n  const back = () => {\n    //4 часа утра, ахуеть, оно работает, я в шоке, комментарии этого кода больше похожи на записки сумашедего\n\n    if (board.BoardsStr.length > 1) {\n      //board.Boards.pop()\n      //console.log(board.Boards.length)\n      //const nBoard: Board = board.Boards[board.Boards.length - 1].getCopyBoard()\n      //if (nBoard.getCell(3, 3).figure) {console.log(0)}\n      //else {console.log(1)}\n      //console.log(board.BoardsStr.length)\n\n      board.BoardsStr.pop();\n      const b = board.BoardsStr[board.BoardsStr.length - 1].str;\n      //console.log(b)\n      const bor = board.stringToBoard(b);\n      swapPlayer();\n      setBoard(bor);\n      board = bor;\n      board.NextM();\n      //setBoard(nBoard)\n      //setBoardEnd(!boardEnd)\n      /*let boardSTR: string = \"\";\n      boardSTR = nBoard.boardToString();\n      if(currentPlayer?.color === Colors.WHITE) {boardSTR += \"b\"}\n      else {boardSTR += \"w\"}\n      console.log({boardSTR})*/\n      setSelectedCell(null);\n      //console.log(board.BoardsStr.length)\n    }\n  };\n\n  //board.highlightArrow(selectedCell)\n  if (mod.mod === Modes.NULL || mod.mod === Modes.PLAY) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"choose\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0440\\u0435\\u0436\\u0438\\u043C \\u0438\\u0433\\u0440\\u044B \\u0438\\u043B\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0441\\u043E\\u0437\\u0434\\u0430\\u0439\\u0442\\u0435 \\u043D\\u043E\\u0432\\u044B\\u0439 \\u0434\\u0435\\u0431\\u044E\\u0442 (+)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this);\n  }\n  if (mod.mod === Modes.PLAYWHITE) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: board.cells.map((row, index) =>\n        /*#__PURE__*/\n        // индексом проходимся по ров индексами\n        //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n        _jsxDEV(React.Fragment, {\n          children: row.map(cell =>\n          /*#__PURE__*/\n          //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n          _jsxDEV(CellComponentForPlay, {\n            treehod: cell.isHod(),\n            click: click,\n            cell: cell\n\n            //z={cell.znach}\n            ,\n\n            // для элемента массива нужно указывать ключ\n            selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n            // если текущая и выбранная равны\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this);\n  }\n  if (mod.mod === Modes.PLAYBLACK) {\n    //туть нада \n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: board.cells.map((row, index) =>\n        /*#__PURE__*/\n        // индексом проходимся по ров индексами\n        //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n        _jsxDEV(React.Fragment, {\n          children: row.map(cell =>\n          /*#__PURE__*/\n          //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n          _jsxDEV(CellComponentForPlay, {\n            treehod: cell.isHod(),\n            click: click,\n            cell: cell\n\n            //z={cell.znach}\n            ,\n\n            // для элемента массива нужно указывать ключ\n            selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n            // если текущая и выбранная равны\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 29\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), hod ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red'\n        },\n        children: \"\\u0422\\u0430\\u043A\\u043E\\u0433\\u043E \\u0445\\u043E\\u0434\\u0430 \\u0432 \\u0434\\u0435\\u0431\\u044E\\u0442\\u0435 \\u043D\\u0435\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 24\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0435\\u0439 \\u0438\\u0433\\u0440\\u043E\\u043A \", (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color) === Colors.WHITE ? \"Белый\" : \"Чёрный\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: board.cells.map((row, index) =>\n        /*#__PURE__*/\n        // индексом проходимся по ров индексами\n        //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n        _jsxDEV(React.Fragment, {\n          children: row.map(cell =>\n          /*#__PURE__*/\n          //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n          _jsxDEV(CellComponent, {\n            treehod: cell.isHod(),\n            click: click,\n            cell: cell\n\n            //z={cell.znach}\n            ,\n\n            // для элемента массива нужно указывать ключ\n            selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n            // если текущая и выбранная равны\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 29\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => delet(),\n        className: \"Delete\",\n        children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0442\\u0435\\u043A\\u0443\\u0449\\u0443\\u044E \\u0432\\u0435\\u0442\\u043A\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => back(),\n        className: \"Back\",\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n_s(BoardComponent, \"qO5pH7CFly+oN4WQBCefY4SH7gM=\");\n_c = BoardComponent;\nexport default BoardComponent;\nvar _c;\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useEffect","useState","CellComponent","Modes","Colors","CellComponentForPlay","sendGetMoveRandom","jsxDEV","_jsxDEV","BoardComponent","board","setBoard","swapPlayer","mod","boards","currentPlayer","token","_s","selectedCell","setSelectedCell","boardEnd","setBoardEnd","hod","setHod","click","cell","_selectedCell$figure","figure","canMove","moveFigure","boardSTR","boardToString","color","WHITE","id","MoveTo","debut","console","log","BoardsStr","push","str","NextM","_cell$figure","clickByPlay","_selectedCell$figure2","bod","HodWhy","back","Hod","bor","stringToBoard","positionAfter","_cell$figure2","highlightCells","updateBoard","newBoard","getCopyBoard","delet","length","pop","b","NULL","PLAY","className","children","fileName","_jsxFileName","lineNumber","columnNumber","PLAYWHITE","cells","map","row","index","Fragment","treehod","isHod","selected","x","y","PLAYBLACK","style","onClick","_c","$RefreshReg$"],"sources":["/home/eva/Рабочий стол/reg/src/components/BoardComponent.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport { Board } from '../models/Board';\nimport CellComponent from './CellComponent';\nimport { Cell } from '../models/Cell';\nimport { Player } from '../models/Player';\nimport { Modes } from '../models/Modes';\nimport { Mod } from '../models/Mod';\nimport DebutsMake from './DebutsMake';\nimport { Colors } from '../models/Colors';\nimport CellComponentForPlay from './CellCompoForPlay';\nimport { sendGetMoveRandom } from '../models/bek';\n\n\ninterface BoardProps { //интерфейс ожидаемых пропсов\n    board: Board;\n    setBoard: (board: Board) => void; // функция которой можно изменить доску!!!!!!!!\n    currentPlayer: Player | null;\n    swapPlayer: () => void;\n    mod: Mod;\n    boards: string[];\n    token: string;\n}\n\n//FC указывает что это функциональный компонент\nconst BoardComponent: FC<BoardProps> = ({board, setBoard, swapPlayer, mod, boards, currentPlayer, token}) => {\n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\n    const [boardEnd, setBoardEnd] = useState<boolean>(false);\n    const [hod, setHod] = useState<boolean>(false);\n\n    // состояние, функция которая изменяет состояние. Тип в состоянии или ячейка или нулл\n\n    function click(cell: Cell) { // аргумент ячейка, на которую нажали\n        // если у нас есть выбранная ячейка, на которой стоит фигура,  \n        // и эта ячейка не равняется той на которую мы хотим нажать\n        // и кэн мув возвращает тру\n        if (selectedCell && selectedCell !== cell && selectedCell.figure?.canMove(cell)) { // если содержит фигуру\n            selectedCell.moveFigure(cell); // то двигаем фигурку\n            //cell.board.swap()\n            swapPlayer()\n            setSelectedCell(null); // меняем состояние\n            //updateBoard() // в видео он не нужен, а нам нужно обновить\n            //console.log(\"+++\")\n            //тут внимательно проверять очередность хода, если вызов функции переносить\n            \n            let boardSTR: string = \"\";\n            boardSTR = cell.board.boardToString();\n            if(currentPlayer?.color === Colors.WHITE) {boardSTR += \"b\"}\n            else {boardSTR += \"w\"}\n            let id = cell.board.MoveTo(boardSTR, mod.debut.id, token);\n            //тут нужна функция чтобы проверить а есть ли такая строчка вообще, и если есть, то вернуть просто её id, а если нет, то всё забить в бэк и вернуть id\n            console.log({boardSTR})\n            board.BoardsStr.push({str: boardSTR, id: id}) /////Ева, обрати сюда внимание, раскоменти эту строчку, тут FEN\n            cell.board.NextM()\n            //board.Boards.push(cell.board)\n        }\n        else {\n            if(cell.figure?.color === currentPlayer?.color) {\n                setSelectedCell(cell);\n            }     \n        }\n    }\n\n    function clickByPlay(cell: Cell) {\n        if (selectedCell && selectedCell !== cell && selectedCell.figure?.canMove(cell)) { // если содержит фигуру\n            selectedCell.moveFigure(cell); // то двигаем фигурку\n            \n            \n            let boardSTR: string = \"\";\n            boardSTR = cell.board.boardToString();\n            if(currentPlayer?.color === Colors.WHITE) {boardSTR += \"b\"}\n            else {boardSTR += \"w\"}\n\n            //функция тут нужна, которая проверит есть ли такой ход, и если есть возвращает его id и строку а если нет то вернёт 0\n            let bod = cell.board.HodWhy(boardSTR);\n            cell.board.BoardsStr.push({str: bod.str, id: bod.id})\n            if (bod.id === 0) {\n                //тут состояние, чтобы вывелось что такого хода нет и откатить назад\n                setHod(true)\n                back()\n            } else {\n                // тут берем рандомный ход и перерисовываем доску\n                let Hod = sendGetMoveRandom(bod.id);\n                const bor: Board = board.stringToBoard(Hod.positionAfter)\n                cell.board.BoardsStr.push({str: Hod.positionAfter, id: Hod.id})\n                setBoard(bor)\n                cell.board = bor\n                setHod(false)\n            }\n\n            //let id = cell.board.MoveTo(boardSTR, mod.debut.id, token);\n            \n            //console.log({boardSTR})\n            //board.BoardsStr.push({str: boardSTR, id: id}) /////Ева, обрати сюда внимание, раскоменти эту строчку, тут FEN\n            //cell.board.NextM()//тут нужна функция чтобы проверить а есть ли такая строчка вообще, и если есть, то вернуть просто её id, а если нет, то всё забить в бэк и вернуть id\n            setSelectedCell(null); // меняем состояние\n        }\n        else {\n            if(cell.figure?.color === currentPlayer?.color) {\n                setSelectedCell(cell);\n            }     \n        }\n    }\n    \n\n    useEffect(() => { // чтобы реакт перерисовал компонент\n        highlightCells() // вызывается на любое изменение ячейки\n    }, [selectedCell, boardEnd])\n\n    function highlightCells() { // выставление свойства аваэлибл, подсветка доступных ячеек\n        board.highlightCells(selectedCell) // подсветка необходимых ячеек\n        //board.highlightArrow(selectedCell)\n        updateBoard() // перерисовываем доску\n    }\n\n    function updateBoard() { // обновление состояния, при перерисовке доски вызывается\n        //board.highlightArrow(selectedCell)\n        const newBoard = board.getCopyBoard()\n        setBoard(newBoard)\n    }\n\n\n\n    const delet = () => {\n        //отправляем на бэк сообщение об уалении ветки\n        back()\n    }\n\n    const back = () => { //4 часа утра, ахуеть, оно работает, я в шоке, комментарии этого кода больше похожи на записки сумашедего\n        \n        \n        if (board.BoardsStr.length > 1) {\n            //board.Boards.pop()\n            //console.log(board.Boards.length)\n            //const nBoard: Board = board.Boards[board.Boards.length - 1].getCopyBoard()\n            //if (nBoard.getCell(3, 3).figure) {console.log(0)}\n            //else {console.log(1)}\n            //console.log(board.BoardsStr.length)\n\n            board.BoardsStr.pop()\n            const b: string = board.BoardsStr[board.BoardsStr.length - 1].str\n            //console.log(b)\n            const bor: Board = board.stringToBoard(b)\n            swapPlayer()\n            setBoard(bor)\n            board = bor\n            board.NextM()\n            //setBoard(nBoard)\n            //setBoardEnd(!boardEnd)\n            /*let boardSTR: string = \"\";\n            boardSTR = nBoard.boardToString();\n            if(currentPlayer?.color === Colors.WHITE) {boardSTR += \"b\"}\n            else {boardSTR += \"w\"}\n            console.log({boardSTR})*/\n            setSelectedCell(null);\n            //console.log(board.BoardsStr.length)\n        }\n        \n    }\n\n    //board.highlightArrow(selectedCell)\n    if ((mod.mod === Modes.NULL) || (mod.mod === Modes.PLAY)) {\n        return ( \n        <div className='choose'>\n\n        <h1>Выберите режим игры или</h1>\n        <h1>создайте новый дебют (+)</h1>\n\n        </div> \n        );\n    }\n\n    if (mod.mod === Modes.PLAYWHITE) {\n        return (\n            <div>\n                <div className=\"board\">\n                {board.cells.map((row, index) => // индексом проходимся по ров индексами\n                    //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n                    <React.Fragment key={index}>\n                                \n                        {row.map(cell => //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n                            <CellComponentForPlay\n                                treehod={cell.isHod()}\n                                click={click}\n                                cell={cell}\n                                \n                                //z={cell.znach}\n                                key={cell.id} // для элемента массива нужно указывать ключ\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\n                                // если текущая и выбранная равны\n                            />\n                        )}\n                    </React.Fragment>\n                )}\n                </div>\n            </div>\n        );\n    }\n\n    if (mod.mod === Modes.PLAYBLACK) {\n        //туть нада \n        \n\n        return (\n            <div>\n                <div className=\"board\">\n                {board.cells.map((row, index) => // индексом проходимся по ров индексами\n                    //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n                    <React.Fragment key={index}>\n                                \n                        {row.map(cell => //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n                            <CellComponentForPlay\n                                treehod={cell.isHod()}\n                                click={click}\n                                cell={cell}\n                                \n                                //z={cell.znach}\n                                key={cell.id} // для элемента массива нужно указывать ключ\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\n                                // если текущая и выбранная равны\n                            />\n                        )}\n                    </React.Fragment>\n                )}\n                </div>\n                {hod ? <div style={{color:'red'}}>Такого хода в дебюте нет</div> : \"\"}\n            </div>\n        );\n    }\n\n  return (\n    <div>\n        \n\n            <div>\n\n            <h3>Текущей игрок {(currentPlayer?.color === Colors.WHITE) ? \"Белый\" : \"Чёрный\"}</h3>\n            <div className=\"board\">\n                {board.cells.map((row, index) => // индексом проходимся по ров индексами\n                    //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n                    <React.Fragment key={index}>\n                                \n                        {row.map(cell => //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n                            <CellComponent\n                                treehod={cell.isHod()}\n                                click={click}\n                                cell={cell}\n                                \n                                //z={cell.znach}\n                                key={cell.id} // для элемента массива нужно указывать ключ\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\n                                // если текущая и выбранная равны\n                            />\n                        )}\n                    </React.Fragment>\n                )}\n            </div>\n            <button onClick={() => delet()} className=\"Delete\">Удалить текущую ветку</button>\n            <button onClick={() => back()} className=\"Back\">Назад</button>\n\n        </div>\n\n    \n\n    </div>\n  );\n};\n\nexport default BoardComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}