{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { FigureNames } from \"./figures/Figure\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nimport { Znach } from \"./figures/Znach\";\nexport class Board {\n  addDebuts() {\n    this.Debuts.push('1234');\n    this.Debuts.push('1234xcxfcgv');\n    this.Debuts.push('erygsb');\n    this.Debuts.push('0987654');\n    this.Debuts.push('098765421111111111');\n  }\n  initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null, null)); // черные\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null, null)); // белые\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n  getCopyBoard() {\n    const newBoard = new Board(); // новый объект доски\n    newBoard.cells = this.cells; // переносим ячейки\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.Debuts = this.Debuts;\n    return newBoard; // возвращаем уже новую доску\n  }\n  highlightCells(selecttedCell) {\n    // подсветка ячеек\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < row.length; j++) {\n        var _selecttedCell$figure;\n        const target = row[j]; // проходимся по всем ячейкам\n        target.available = !!(selecttedCell !== null && selecttedCell !== void 0 && (_selecttedCell$figure = selecttedCell.figure) !== null && _selecttedCell$figure !== void 0 && _selecttedCell$figure.canMove(target)); // меняем поле аваилибл !! к булиан приобразовывает\n        //target.hodi = target.isHod()\n      }\n    }\n  }\n  highlightArrow(selecttedCell) {\n    // подсветка ячеек существующих ходов\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < row.length; j++) {\n        const target = row[j]; // проходимся по всем ячейкам\n        target.hodi = target.isHod();\n      }\n    }\n  }\n  boardToString() {\n    let boardSTR = \"\";\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      let s = \"\";\n      let n = 0;\n      for (let j = 0; j < row.length; j++) {\n        const target = row[j]; // проходимся по всем ячейкам\n        if (target.figure) {\n          s = s + n;\n          n = 0;\n          switch (target.figure.name) {\n            case FigureNames.BISHOP:\n              s += \"b\";\n            case FigureNames.KING:\n              s += \"k\";\n            case FigureNames.QUEEN:\n              s += \"q\";\n            case FigureNames.KNIGHT:\n              s += \"n\";\n            case FigureNames.ROOK:\n              s += \"r\";\n            case FigureNames.PAWN:\n              s += \"p\";\n          }\n        } else {\n          n++;\n          if (j === row.length - 1) {\n            s = s + n;\n          }\n        }\n      }\n    }\n  }\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n    this.Debuts = [];\n  } //this.highlightCells();\n  getCell(x, y) {\n    // возвращаем элемент ячейку\n    return this.cells[y][x];\n  }\n  addPawns() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n  addKings() {\n    new King(Colors.BLACK, this.getCell(4, 0));\n    new King(Colors.WHITE, this.getCell(4, 7));\n  }\n  addBishop() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n  addKnight() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n  addQueen() {\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n  }\n  addRook() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n  addZnach() {\n    new Znach(\"1\", this.getCell(7, 7));\n  }\n  addFigures() {\n    this.addBishop();\n    this.addKings();\n    this.addKnight();\n    this.addPawns();\n    this.addRook();\n    this.addQueen();\n    //this.addZnach()\n    this.addDebuts();\n  }\n}","map":{"version":3,"names":["Cell","Colors","Bishop","FigureNames","King","Knight","Pawn","Queen","Rook","Znach","Board","addDebuts","Debuts","push","initCells","i","row","j","BLACK","WHITE","cells","getCopyBoard","newBoard","lostBlackFigures","lostWhiteFigures","highlightCells","selecttedCell","length","_selecttedCell$figure","target","available","figure","canMove","highlightArrow","hodi","isHod","boardToString","boardSTR","s","n","name","BISHOP","KING","QUEEN","KNIGHT","ROOK","PAWN","constructor","getCell","x","y","addPawns","addKings","addBishop","addKnight","addQueen","addRook","addZnach","addFigures"],"sources":["/home/eva/Рабочий стол/reg/src/models/Board.ts"],"sourcesContent":["import {Cell} from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { Figure, FigureNames } from \"./figures/Figure\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nimport { Znach } from \"./figures/Znach\";\n\nexport class Board {\n    cells: Cell[][] = []\n    lostBlackFigures: Figure[] = []\n    lostWhiteFigures: Figure[] = []\n    Debuts: string[] = []\n\n    \n    addDebuts() {\n        this.Debuts.push('1234')\n        this.Debuts.push('1234xcxfcgv')\n        this.Debuts.push('erygsb')\n        this.Debuts.push('0987654')\n        this.Debuts.push('098765421111111111')\n    }\n\n\n    \n\n    public initCells() {\n        for(let i = 0; i < 8; i++) {\n            const row: Cell[] = []\n            for (let j = 0; j < 8; j++) {\n                if ((i + j) % 2 !== 0) {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null, null)) // черные\n                } else {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null, null)) // белые\n                }\n            }\n            this.cells.push(row);\n        }\n    }\n\n    public getCopyBoard(): Board {\n        const newBoard = new Board; // новый объект доски\n        newBoard.cells = this.cells; // переносим ячейки\n        newBoard.lostBlackFigures = this.lostBlackFigures\n        newBoard.lostWhiteFigures = this.lostWhiteFigures\n        newBoard.Debuts = this.Debuts\n        return newBoard; // возвращаем уже новую доску\n    }\n\n    public highlightCells(selecttedCell: Cell | null) { // подсветка ячеек\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j]; // проходимся по всем ячейкам\n                target.available = !!selecttedCell?.figure?.canMove(target) // меняем поле аваилибл !! к булиан приобразовывает\n                //target.hodi = target.isHod()\n            }\n        }\n    }\n\n    public highlightArrow(selecttedCell: Cell | null) { // подсветка ячеек существующих ходов\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j]; // проходимся по всем ячейкам\n                target.hodi = target.isHod()\n            }\n        }\n    }\n\n    public boardToString() {\n        let boardSTR: string = \"\";\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            let s: string = \"\";\n            let n: number = 0;\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j]; // проходимся по всем ячейкам\n                if (target.figure) {\n                    s = s + n;\n                    n = 0;\n                    switch (target.figure.name) {\n                        case (FigureNames.BISHOP): s += \"b\";\n                        case (FigureNames.KING): s += \"k\";\n                        case (FigureNames.QUEEN): s += \"q\";\n                        case (FigureNames.KNIGHT): s += \"n\";\n                        case (FigureNames.ROOK): s += \"r\";\n                        case (FigureNames.PAWN): s += \"p\";\n                    }\n                } else {\n                    n++;\n                    if (j === row.length - 1) {\n                        s = s + n;\n                    }\n                }\n            }\n        }\n    }\n    \n    constructor(){\n        //this.highlightCells();\n    }\n\n    public getCell(x: number, y: number) { // возвращаем элемент ячейку\n        return this.cells[y][x]\n    }\n\n    private addPawns() {\n        for (let i = 0; i < 8; i++) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1))\n            new Pawn(Colors.WHITE, this.getCell(i, 6))\n        }\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(4, 0))\n        new King(Colors.WHITE, this.getCell(4, 7))\n    }\n\n    private addBishop() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0))\n        new Bishop(Colors.WHITE, this.getCell(2, 7))\n        new Bishop(Colors.BLACK, this.getCell(5, 0))\n        new Bishop(Colors.WHITE, this.getCell(5, 7))\n    }\n\n    private addKnight() {\n        new Knight(Colors.BLACK, this.getCell(1, 0))\n        new Knight(Colors.WHITE, this.getCell(1, 7))\n        new Knight(Colors.BLACK, this.getCell(6, 0))\n        new Knight(Colors.WHITE, this.getCell(6, 7))\n    }\n\n    private addQueen() {\n        new Queen(Colors.BLACK, this.getCell(3, 0))\n        new Queen(Colors.WHITE, this.getCell(3, 7))\n    }\n\n    private addRook() {\n        new Rook(Colors.BLACK, this.getCell(0, 0))\n        new Rook(Colors.WHITE, this.getCell(0, 7))\n        new Rook(Colors.BLACK, this.getCell(7, 0))\n        new Rook(Colors.WHITE, this.getCell(7, 7))\n    }\n\n    private addZnach() {\n        new Znach(\"1\", this.getCell(7, 7))\n    }\n\n    public addFigures() {\n        this.addBishop()\n        this.addKings()\n        this.addKnight()\n        this.addPawns()\n        this.addRook()\n        this.addQueen()\n        //this.addZnach()\n        this.addDebuts()\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}