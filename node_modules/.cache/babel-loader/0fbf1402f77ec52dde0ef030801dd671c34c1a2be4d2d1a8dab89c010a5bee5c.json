{"ast":null,"code":"export function cinemaToday() {\n  const xhr = new XMLHttpRequest();\n  const url = 'https://shift-intensive.ru/api/cinema/today';\n\n  // Инициализируем запрос\n  xhr.open('GET', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для токена\n  //xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Отправляем запрос\n  xhr.send();\n\n  // Парсим ответ в JSON и возвращаем массив объектов\n  return JSON.parse(xhr.responseText); // Предполагается, что ответ - это массив объектов\n}\nexport function sendPostUser(login, password) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/user'; // Замените на ваш URL\n\n  const requestBody = {\n    login: login,\n    password: password\n  };\n\n  // Создаем объект с данными для отправки\n  const data = JSON.stringify(requestBody);\n\n  // Инициализируем запрос\n  xhr.open('POST', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для отправки JSON\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  // Отправляем запрос\n  xhr.send(data);\n\n  // Парсим ответ в JSON\n  const response = JSON.parse(xhr.responseText);\n  // Возвращаем значение поля id\n\n  //console.log('aaaaaaaaaaa');\n  //console.log(response.id);\n\n  return response.id; // Предполагается, что id - это число\n}\nexport function sendPostUserToken(login, password) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/user/token'; // Замените на ваш URL\n\n  const requestBody = {\n    login: login,\n    password: password\n  };\n\n  // Создаем объект с данными для отправки\n  const data = JSON.stringify(requestBody);\n\n  // Инициализируем запрос\n  xhr.open('POST', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для отправки JSON\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  // Отправляем запрос\n  xhr.send(data);\n\n  // Возвращаем ответ как строку\n  return xhr.responseText; // Предполагается, что ответ - это строка\n}\nexport function sendPostTree(name, token) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/tree'; // Замените на ваш URL\n\n  const requestBody = {\n    name: name\n  };\n\n  // Создаем объект с данными для отправки\n  const data = JSON.stringify(requestBody);\n\n  // Инициализируем запрос\n  xhr.open('POST', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для токена\n  xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Устанавливаем заголовок для отправки JSON\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  // Отправляем запрос\n  xhr.send(data);\n\n  // Парсим ответ в JSON\n  const response = JSON.parse(xhr.responseText);\n  // Возвращаем значение поля id\n\n  //console.log('aaaaaaaaaaa');\n  //console.log(response.id);\n  console.log(\"asasasas\", response.id);\n  return response.id; // Предполагается, что id - это число\n}\nexport function sendGetMoveTree(treeId) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/move/tree/' + treeId; // Замените на ваш URL\n\n  // Инициализируем запрос\n  xhr.open('GET', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для токена\n  //xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Отправляем запрос\n  xhr.send();\n  const response = JSON.parse(xhr.responseText);\n  // Возвращаем значение поля id\n\n  //console.log('aaaaaaaaaaa');\n  //console.log(response.id);\n  //console.log(\"asasasas\", response.id)\n  return response.id; // Предполагается, что id - это число\n}\nexport function sendGetMoveNext(idMove) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/move/next/' + idMove; // Замените на ваш URL\n\n  // Инициализируем запрос\n  xhr.open('GET', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для токена\n  //xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Отправляем запрос\n  xhr.send();\n\n  // Парсим ответ в JSON и возвращаем массив объектов\n  //let A: { id: number; positionAfter: string }[] = [];\n  return JSON.parse(xhr.responseText); // Предполагается, что ответ - это массив объектов\n}\nexport function sendGetMoveRandom(idMove) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/move/random/' + idMove; // Замените на ваш URL\n\n  // Инициализируем запрос\n  xhr.open('GET', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для токена\n  //xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Отправляем запрос\n  xhr.send();\n\n  // Парсим ответ в JSON и возвращаем массив объектов\n  //let A: { id: number; positionAfter: string }[] = [];\n  return JSON.parse(xhr.responseText); // Предполагается, что ответ - это массив объектов\n}\nexport function sendPostMove(treeId, positionAfter, preventMoveId, colorWhite, token) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/move'; // Замените на ваш URL\n\n  const requestBody = {\n    treeId: treeId,\n    positionAfter: positionAfter,\n    preventMoveId: preventMoveId,\n    colorWhite: colorWhite\n  };\n\n  // Создаем объект с данными для отправки\n  const data = JSON.stringify(requestBody);\n\n  // Инициализируем запрос\n  xhr.open('POST', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для токена\n  xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Устанавливаем заголовок для отправки JSON\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  // Отправляем запрос\n  xhr.send(data);\n\n  // Парсим ответ в JSON\n  const response = JSON.parse(xhr.responseText);\n  // Возвращаем значение поля id\n\n  //console.log('aaaaaaaaaaa');\n  //console.log(response.id);\n  console.log(\"asasasas\", response.id);\n  return response.id; // Предполагается, что id - это число\n}\nexport function sendDeleteUserToken(token) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/user/token'; // Замените на ваш URL\n\n  // Инициализируем запрос\n  xhr.open('DELETE', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для токена\n  xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n  // Отправляем запрос\n  xhr.send();\n\n  // Парсим ответ в JSON и возвращаем массив объектов\n  return 0; // Предполагается, что ответ - это массив объектов\n}\nexport function hashPassword(input) {\n  // MD5\n\n  let hash = 0;\n  for (let i = 0; i < input.length; i++) {\n    hash = (hash << 5) - hash + input.charCodeAt(i); // hash * 31 + charCode\n    hash |= 0; // Приведение к 32-битному знаковому числу\n  }\n\n  // Преобразуем хэш в строку в шестнадцатеричном формате\n  let result = Math.abs(hash).toString(16);\n  return result.substring(0, 40);\n}","map":{"version":3,"names":["cinemaToday","xhr","XMLHttpRequest","url","open","send","JSON","parse","responseText","sendPostUser","login","password","requestBody","data","stringify","setRequestHeader","response","id","sendPostUserToken","sendPostTree","name","token","console","log","sendGetMoveTree","treeId","sendGetMoveNext","idMove","sendGetMoveRandom","sendPostMove","positionAfter","preventMoveId","colorWhite","sendDeleteUserToken","hashPassword","input","hash","i","length","charCodeAt","result","Math","abs","toString","substring"],"sources":["/home/eva/Рабочий стол/cinema1/src/models/bek.ts"],"sourcesContent":["export function cinemaToday(): {\n    success: boolean,\n    reason: string,\n    films: [\n      {\n        id: string,\n        name: string,\n        originalName: string,\n        description: string,\n        releaseDate: string,\n        actors: [\n          {\n            id: number,\n            professions: string,\n            fullName: string\n          }\n        ],\n        directors: [\n          {\n            id: number,\n            professions: string,\n            fullName: string\n          }\n        ],\n        runtime: number,\n        ageRating: string,\n        genres: [\n          string\n        ],\n        userRatings: {\n          kinopoisk: number,\n          imdb: number\n        },\n        img: string,\n        country: {\n          name: string,\n          code: string,\n          code2: string,\n          id: number\n        }\n      }\n    ]\n    } {\n    const xhr = new XMLHttpRequest();\n    const url = 'https://shift-intensive.ru/api/cinema/today'; \n\n    // Инициализируем запрос\n    xhr.open('GET', url, false); // false делает запрос синхронным\n\n    // Устанавливаем заголовок для токена\n    //xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n    // Отправляем запрос\n    xhr.send();\n\n        // Парсим ответ в JSON и возвращаем массив объектов\n    return JSON.parse(xhr.responseText); // Предполагается, что ответ - это массив объектов\n    \n}\n\n\n\n\n\n\n\n\n\n\n\nexport function sendPostUser(login: string, password: string): number {\n    const xhr = new XMLHttpRequest();\n    const url = 'http://localhost:8080/user'; // Замените на ваш URL\n\n    const requestBody = {\n        login: login,\n        password: password,\n    };\n\n    // Создаем объект с данными для отправки\n    const data = JSON.stringify(requestBody);\n\n    // Инициализируем запрос\n    xhr.open('POST', url, false); // false делает запрос синхронным\n\n    // Устанавливаем заголовок для отправки JSON\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Отправляем запрос\n    xhr.send(data);\n\n    \n        // Парсим ответ в JSON\n        const response = JSON.parse(xhr.responseText);\n        // Возвращаем значение поля id\n\n        //console.log('aaaaaaaaaaa');\n        //console.log(response.id);\n\n        return response.id; // Предполагается, что id - это число\n    \n}\n\n\n\n\nexport function sendPostUserToken(login: string, password: string): string {\n    const xhr = new XMLHttpRequest();\n    const url = 'http://localhost:8080/user/token'; // Замените на ваш URL\n\n    const requestBody = {\n        login: login,\n        password: password,\n    };\n\n    // Создаем объект с данными для отправки\n    const data = JSON.stringify(requestBody);\n\n    // Инициализируем запрос\n    xhr.open('POST', url, false); // false делает запрос синхронным\n\n    // Устанавливаем заголовок для отправки JSON\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Отправляем запрос\n    xhr.send(data);\n\n        // Возвращаем ответ как строку\n    return xhr.responseText; // Предполагается, что ответ - это строка\n\n}\n\n\nexport function sendPostTree(name: string, token: string): number {\n    const xhr = new XMLHttpRequest();\n    const url = 'http://localhost:8080/tree'; // Замените на ваш URL\n\n    const requestBody = {\n        name: name\n    };\n\n    // Создаем объект с данными для отправки\n    const data = JSON.stringify(requestBody);\n\n    // Инициализируем запрос\n    xhr.open('POST', url, false); // false делает запрос синхронным\n\n\n    // Устанавливаем заголовок для токена\n    xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n    // Устанавливаем заголовок для отправки JSON\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Отправляем запрос\n    xhr.send(data);\n\n    \n        // Парсим ответ в JSON\n        const response = JSON.parse(xhr.responseText);\n        // Возвращаем значение поля id\n\n        //console.log('aaaaaaaaaaa');\n        //console.log(response.id);\n        console.log(\"asasasas\", response.id)\n        return response.id; // Предполагается, что id - это число\n    \n}\n\n\n\n\n\n\n\nexport function sendGetMoveTree(treeId: number): number {\n    const xhr = new XMLHttpRequest();\n    const url = 'http://localhost:8080/move/tree/' + treeId; // Замените на ваш URL\n\n    // Инициализируем запрос\n    xhr.open('GET', url, false); // false делает запрос синхронным\n\n    // Устанавливаем заголовок для токена\n    //xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n    // Отправляем запрос\n    xhr.send();\n\n    const response = JSON.parse(xhr.responseText);\n        // Возвращаем значение поля id\n\n        //console.log('aaaaaaaaaaa');\n        //console.log(response.id);\n    //console.log(\"asasasas\", response.id)\n    return response.id; // Предполагается, что id - это число\n    \n}\n\nexport function sendGetMoveNext(idMove: number): {\n    id: number,\n    number: number,\n    treeId: number,\n    positionAfter: string,\n    nameMove: null | string,\n    colorWhite: boolean,\n    preventMove: number\n}[] {\n    const xhr = new XMLHttpRequest();\n    const url = 'http://localhost:8080/move/next/' + idMove; // Замените на ваш URL\n\n    // Инициализируем запрос\n    xhr.open('GET', url, false); // false делает запрос синхронным\n\n    // Устанавливаем заголовок для токена\n    //xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n    // Отправляем запрос\n    xhr.send();\n\n        // Парсим ответ в JSON и возвращаем массив объектов\n    //let A: { id: number; positionAfter: string }[] = [];\n    return JSON.parse(xhr.responseText); // Предполагается, что ответ - это массив объектов\n    \n}\n\nexport function sendGetMoveRandom(idMove: number): {\n    id: number,\n    number: number,\n    treeId: number,\n    positionAfter: string,\n    nameMove: null | string,\n    colorWhite: boolean,\n    preventMove: number\n} {\n    const xhr = new XMLHttpRequest();\n    const url = 'http://localhost:8080/move/random/' + idMove; // Замените на ваш URL\n\n    // Инициализируем запрос\n    xhr.open('GET', url, false); // false делает запрос синхронным\n\n    // Устанавливаем заголовок для токена\n    //xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n    // Отправляем запрос\n    xhr.send();\n\n        // Парсим ответ в JSON и возвращаем массив объектов\n    //let A: { id: number; positionAfter: string }[] = [];\n    return JSON.parse(xhr.responseText); // Предполагается, что ответ - это массив объектов\n    \n}\n\n\nexport function sendPostMove(treeId: number, positionAfter: string, preventMoveId: number, colorWhite: boolean, token: string): number {\n    const xhr = new XMLHttpRequest();\n    const url = 'http://localhost:8080/move'; // Замените на ваш URL\n\n    const requestBody = {\n        treeId: treeId,\n        positionAfter: positionAfter,\n        preventMoveId: preventMoveId,\n        colorWhite: colorWhite\n    }\n\n    // Создаем объект с данными для отправки\n    const data = JSON.stringify(requestBody);\n\n    // Инициализируем запрос\n    xhr.open('POST', url, false); // false делает запрос синхронным\n\n\n    // Устанавливаем заголовок для токена\n    xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n    // Устанавливаем заголовок для отправки JSON\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Отправляем запрос\n    xhr.send(data);\n\n    \n        // Парсим ответ в JSON\n        const response = JSON.parse(xhr.responseText);\n        // Возвращаем значение поля id\n\n        //console.log('aaaaaaaaaaa');\n        //console.log(response.id);\n        console.log(\"asasasas\", response.id)\n        return response.id; // Предполагается, что id - это число\n    \n}\n\nexport function sendDeleteUserToken(token: string) {\n    const xhr = new XMLHttpRequest();\n    const url = 'http://localhost:8080/user/token'; // Замените на ваш URL\n\n    // Инициализируем запрос\n    xhr.open('DELETE', url, false); // false делает запрос синхронным\n\n    // Устанавливаем заголовок для токена\n    xhr.setRequestHeader('token', token); // Используем 'token' вместо 'Authorization'\n\n    // Отправляем запрос\n    xhr.send();\n\n        // Парсим ответ в JSON и возвращаем массив объектов\n    return 0; // Предполагается, что ответ - это массив объектов\n    \n}\n\n\nexport function hashPassword(input: string): string { // MD5\n\nlet hash = 0;\nfor (let i = 0; i < input.length; i++) {\nhash = (hash << 5) - hash + input.charCodeAt(i); // hash * 31 + charCode\nhash |= 0; // Приведение к 32-битному знаковому числу\n}\n\n// Преобразуем хэш в строку в шестнадцатеричном формате\nlet result = Math.abs(hash).toString(16);\nreturn result.substring(0, 40);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}