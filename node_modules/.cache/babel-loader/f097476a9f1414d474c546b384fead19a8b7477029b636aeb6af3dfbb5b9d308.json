{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { FigureNames } from \"./figures/Figure\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nimport { Znach } from \"./figures/Znach\";\nexport class Board {\n  addDebuts() {\n    this.Debuts.push('1234');\n    this.Debuts.push('1234xcxfcgv');\n    this.Debuts.push('erygsb');\n    this.Debuts.push('0987654');\n    this.Debuts.push('098765421111111111');\n  }\n  initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null, null)); // черные\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null, null)); // белые\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n  getCopyBoard() {\n    const newBoard = new Board(); // новый объект доски\n    newBoard.cells = this.cells; // переносим ячейки\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.Debuts = this.Debuts;\n    newBoard.Boards = this.Boards;\n    newBoard.BoardsStr = this.BoardsStr;\n    newBoard.currentPlayer = this.currentPlayer;\n    return newBoard; // возвращаем уже новую доску\n  }\n  highlightCells(selecttedCell) {\n    // подсветка ячеек\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < row.length; j++) {\n        var _selecttedCell$figure;\n        const target = row[j]; // проходимся по всем ячейкам\n        target.available = !!(selecttedCell !== null && selecttedCell !== void 0 && (_selecttedCell$figure = selecttedCell.figure) !== null && _selecttedCell$figure !== void 0 && _selecttedCell$figure.canMove(target)); // меняем поле аваилибл !! к булиан приобразовывает\n        //target.hodi = target.isHod()\n      }\n    }\n  }\n  highlightArrow(selecttedCell) {\n    // подсветка ячеек существующих ходов\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < row.length; j++) {\n        const target = row[j]; // проходимся по всем ячейкам\n        target.hodi = target.isHod();\n      }\n    }\n  }\n  swap() {\n    this.currentPlayer = this.currentPlayer === Colors.WHITE ? Colors.BLACK : Colors.WHITE;\n  }\n  stringToBoard(str) {\n    var _newBoard$getCell$fig;\n    let s = str.split(\" \");\n    let b = s[0].split(\"/\");\n    const newBoard = new Board();\n    newBoard.initCells(); //метод инициализации ячеек\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      let so = b[i];\n      let n = 0;\n      let j = 0;\n      for (let bukind = 0; bukind < so.length; bukind++) {\n        let isNumber = /^\\d+$/.test(so[bukind]);\n        if (isNumber) {\n          let nun = parseInt(so[bukind]);\n          for (let k = 0; k < nun; k++) {\n            newBoard.getCell(i, j).figure = null;\n            j++;\n          }\n        } else {\n          switch (so[bukind]) {\n            case \"b\":\n              new Bishop(Colors.BLACK, newBoard.getCell(i, j));\n              break;\n            case \"k\":\n              new Bishop(Colors.BLACK, newBoard.getCell(i, j));\n              break;\n            case \"q\":\n              new Bishop(Colors.BLACK, newBoard.getCell(i, j));\n              break;\n            case \"n\":\n              new Bishop(Colors.BLACK, newBoard.getCell(i, j));\n              break;\n            case \"r\":\n              new Bishop(Colors.BLACK, newBoard.getCell(i, j));\n              break;\n            case \"p\":\n              new Bishop(Colors.BLACK, newBoard.getCell(i, j));\n              break;\n            case \"B\":\n              new Bishop(Colors.WHITE, newBoard.getCell(i, j));\n              break;\n            case \"K\":\n              new Bishop(Colors.WHITE, newBoard.getCell(i, j));\n              break;\n            case \"Q\":\n              new Bishop(Colors.WHITE, newBoard.getCell(i, j));\n              break;\n            case \"N\":\n              new Bishop(Colors.WHITE, newBoard.getCell(i, j));\n              break;\n            case \"R\":\n              new Bishop(Colors.WHITE, newBoard.getCell(i, j));\n              break;\n            case \"P\":\n              new Bishop(Colors.WHITE, newBoard.getCell(i, j));\n              break;\n          }\n          j++;\n        }\n      }\n    }\n    if (s[1] !== \"-\") {\n      for (let bukint = 0; bukint < s[1].length; bukint++) {\n        switch (s[1][bukint]) {\n          case \"K\":\n            (_newBoard$getCell$fig = newBoard.getCell(7, 7).figure) === null || _newBoard$getCell$fig === void 0 ? void 0 : _newBoard$getCell$fig.isFirstStep;\n        }\n      }\n    }\n  }\n  boardToString() {\n    let boardSTR = \"\";\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      let s = \"\";\n      let n = 0;\n      for (let j = 0; j < row.length; j++) {\n        const target = row[j]; // проходимся по всем ячейкам\n        if (target.figure) {\n          if (n !== 0) {\n            s = s + n;\n          }\n          n = 0;\n          if (target.figure.color === Colors.BLACK) {\n            switch (target.figure.name) {\n              case FigureNames.BISHOP:\n                s += \"b\";\n                break;\n              case FigureNames.KING:\n                s += \"k\";\n                break;\n              case FigureNames.QUEEN:\n                s += \"q\";\n                break;\n              case FigureNames.KNIGHT:\n                s += \"n\";\n                break;\n              case FigureNames.ROOK:\n                s += \"r\";\n                break;\n              case FigureNames.PAWN:\n                s += \"p\";\n                break;\n            }\n          } else {\n            switch (target.figure.name) {\n              case FigureNames.BISHOP:\n                s += \"B\";\n                break;\n              case FigureNames.KING:\n                s += \"K\";\n                break;\n              case FigureNames.QUEEN:\n                s += \"Q\";\n                break;\n              case FigureNames.KNIGHT:\n                s += \"N\";\n                break;\n              case FigureNames.ROOK:\n                s += \"R\";\n                break;\n              case FigureNames.PAWN:\n                s += \"P\";\n                break;\n            }\n          }\n        } else {\n          n++;\n          if (j === row.length - 1) {\n            s = s + n;\n          }\n        }\n      }\n      boardSTR += s;\n      if (!(i === this.cells.length - 1)) {\n        boardSTR += \"/\";\n      }\n    }\n    boardSTR += \" \";\n    let q = this.getCell(0, 0);\n    let Q = this.getCell(0, 7);\n    let k = this.getCell(7, 0);\n    let K = this.getCell(7, 7);\n    let king = this.getCell(4, 0);\n    let KING = this.getCell(4, 7);\n    let n = 0;\n    if (K && KING) {\n      var _K$figure, _KING$figure;\n      if ((_K$figure = K.figure) !== null && _K$figure !== void 0 && _K$figure.isFirstStep && (_KING$figure = KING.figure) !== null && _KING$figure !== void 0 && _KING$figure.isFirstStep) {\n        boardSTR += \"K\";\n        n++;\n      }\n    }\n    if (Q && KING) {\n      var _Q$figure, _KING$figure2;\n      if ((_Q$figure = Q.figure) !== null && _Q$figure !== void 0 && _Q$figure.isFirstStep && (_KING$figure2 = KING.figure) !== null && _KING$figure2 !== void 0 && _KING$figure2.isFirstStep) {\n        boardSTR += \"Q\";\n        n++;\n      }\n    }\n    if (k && king) {\n      var _k$figure, _king$figure;\n      if ((_k$figure = k.figure) !== null && _k$figure !== void 0 && _k$figure.isFirstStep && (_king$figure = king.figure) !== null && _king$figure !== void 0 && _king$figure.isFirstStep) {\n        boardSTR += \"k\";\n        n++;\n      }\n    }\n    if (q && king) {\n      var _q$figure, _king$figure2;\n      if ((_q$figure = q.figure) !== null && _q$figure !== void 0 && _q$figure.isFirstStep && (_king$figure2 = king.figure) !== null && _king$figure2 !== void 0 && _king$figure2.isFirstStep) {\n        boardSTR += \"q\";\n        n++;\n      }\n    }\n    if (n === 0) {\n      boardSTR += \"-\";\n    }\n    boardSTR += \" \";\n    return boardSTR;\n  }\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n    this.Debuts = [];\n    this.Boards = [];\n    this.BoardsStr = [];\n    this.numberHod = 0;\n    this.currentPlayer = Colors.WHITE;\n  } //this.highlightCells();\n  getCell(x, y) {\n    // возвращаем элемент ячейку\n    return this.cells[y][x];\n  }\n  addPawns() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n  addKings() {\n    new King(Colors.BLACK, this.getCell(4, 0));\n    new King(Colors.WHITE, this.getCell(4, 7));\n  }\n  addBishop() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n  addKnight() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n  addQueen() {\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n  }\n  addRook() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n  addZnach() {\n    new Znach(\"1\", this.getCell(7, 7));\n  }\n  addFigures() {\n    this.addBishop();\n    this.addKings();\n    this.addKnight();\n    this.addPawns();\n    this.addRook();\n    this.addQueen();\n    //this.addZnach()\n    this.addDebuts();\n  }\n}","map":{"version":3,"names":["Cell","Colors","Bishop","FigureNames","King","Knight","Pawn","Queen","Rook","Znach","Board","addDebuts","Debuts","push","initCells","i","row","j","BLACK","WHITE","cells","getCopyBoard","newBoard","lostBlackFigures","lostWhiteFigures","Boards","BoardsStr","currentPlayer","highlightCells","selecttedCell","length","_selecttedCell$figure","target","available","figure","canMove","highlightArrow","hodi","isHod","swap","stringToBoard","str","_newBoard$getCell$fig","s","split","b","so","n","bukind","isNumber","test","nun","parseInt","k","getCell","bukint","isFirstStep","boardToString","boardSTR","color","name","BISHOP","KING","QUEEN","KNIGHT","ROOK","PAWN","q","Q","K","king","_K$figure","_KING$figure","_Q$figure","_KING$figure2","_k$figure","_king$figure","_q$figure","_king$figure2","constructor","numberHod","x","y","addPawns","addKings","addBishop","addKnight","addQueen","addRook","addZnach","addFigures"],"sources":["/home/eva/Рабочий стол/reg/src/models/Board.ts"],"sourcesContent":["import App from \"../App\";\nimport {Cell} from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { Figure, FigureNames } from \"./figures/Figure\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nimport { Znach } from \"./figures/Znach\";\n\nexport class Board {\n    cells: Cell[][] = []\n    lostBlackFigures: Figure[] = []\n    lostWhiteFigures: Figure[] = []\n    Debuts: string[] = []\n    Boards: Board[] = []\n    BoardsStr: string[] = []\n    numberHod: number = 0\n    currentPlayer: Colors = Colors.WHITE\n\n\n    \n    addDebuts() {\n        this.Debuts.push('1234')\n        this.Debuts.push('1234xcxfcgv')\n        this.Debuts.push('erygsb')\n        this.Debuts.push('0987654')\n        this.Debuts.push('098765421111111111')\n    }\n\n\n    \n\n    public initCells() {\n        for(let i = 0; i < 8; i++) {\n            const row: Cell[] = []\n            for (let j = 0; j < 8; j++) {\n                if ((i + j) % 2 !== 0) {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null, null)) // черные\n                } else {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null, null)) // белые\n                }\n            }\n            this.cells.push(row);\n        }\n    }\n\n    public getCopyBoard(): Board {\n        const newBoard = new Board; // новый объект доски\n        newBoard.cells = this.cells; // переносим ячейки\n        newBoard.lostBlackFigures = this.lostBlackFigures\n        newBoard.lostWhiteFigures = this.lostWhiteFigures\n        newBoard.Debuts = this.Debuts\n        newBoard.Boards = this.Boards\n        newBoard.BoardsStr = this.BoardsStr\n        newBoard.currentPlayer = this.currentPlayer\n        return newBoard; // возвращаем уже новую доску\n    }\n\n    public highlightCells(selecttedCell: Cell | null) { // подсветка ячеек\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j]; // проходимся по всем ячейкам\n                target.available = !!selecttedCell?.figure?.canMove(target) // меняем поле аваилибл !! к булиан приобразовывает\n                //target.hodi = target.isHod()\n            }\n        }\n    }\n\n    public highlightArrow(selecttedCell: Cell | null) { // подсветка ячеек существующих ходов\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j]; // проходимся по всем ячейкам\n                target.hodi = target.isHod()\n            }\n        }\n    }\n\n    public swap() {\n        this.currentPlayer = ((this.currentPlayer === Colors.WHITE) ? Colors.BLACK : Colors.WHITE)\n    }\n\n    public stringToBoard(str: string) {\n        let s: string[] = str.split(\" \")\n        let b: string[] = s[0].split(\"/\")\n        const newBoard = new Board(); \n\n        newBoard.initCells() //метод инициализации ячеек\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            let so: string = b[i];\n            let n: number = 0;\n            let j = 0;\n            for (let bukind: number = 0; bukind < so.length; bukind++) {\n                let isNumber = /^\\d+$/.test(so[bukind])\n                if (isNumber) {\n                    let nun: number = parseInt(so[bukind])\n                    for (let k = 0; k < nun; k++) {newBoard.getCell(i, j).figure = null; j++;}\n                }\n                else {\n                    switch (so[bukind]) {\n                        case (\"b\"): new Bishop(Colors.BLACK, newBoard.getCell(i, j)); break;\n                        case (\"k\"): new Bishop(Colors.BLACK, newBoard.getCell(i, j)); break;\n                        case (\"q\"): new Bishop(Colors.BLACK, newBoard.getCell(i, j)); break;\n                        case (\"n\"): new Bishop(Colors.BLACK, newBoard.getCell(i, j)); break;\n                        case (\"r\"): new Bishop(Colors.BLACK, newBoard.getCell(i, j)); break;\n                        case (\"p\"): new Bishop(Colors.BLACK, newBoard.getCell(i, j)); break;\n                        case (\"B\"): new Bishop(Colors.WHITE, newBoard.getCell(i, j)); break;\n                        case (\"K\"): new Bishop(Colors.WHITE, newBoard.getCell(i, j)); break;\n                        case (\"Q\"): new Bishop(Colors.WHITE, newBoard.getCell(i, j)); break;\n                        case (\"N\"): new Bishop(Colors.WHITE, newBoard.getCell(i, j)); break;\n                        case (\"R\"): new Bishop(Colors.WHITE, newBoard.getCell(i, j)); break;\n                        case (\"P\"): new Bishop(Colors.WHITE, newBoard.getCell(i, j)); break;        \n                    }\n                    j++;\n                }\n            }  \n        }\n        if (s[1] !== \"-\") {\n            for(let bukint = 0; bukint < s[1].length; bukint++) {\n                switch (s[1][bukint]) {\n                    case (\"K\"): newBoard.getCell(7, 7).figure?.isFirstStep\n                }\n            }\n        }\n        \n    }\n\n    public boardToString() {\n        let boardSTR: string = \"\";\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            let s: string = \"\";\n            let n: number = 0;\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j]; // проходимся по всем ячейкам\n                if (target.figure) {\n                    if (n !== 0) {s = s + n;}             \n                    n = 0;\n                    if (target.figure.color === Colors.BLACK) {\n                        switch (target.figure.name) {\n                            case (FigureNames.BISHOP): s += \"b\"; break;\n                            case (FigureNames.KING): s += \"k\"; break;\n                            case (FigureNames.QUEEN): s += \"q\"; break;\n                            case (FigureNames.KNIGHT): s += \"n\"; break;\n                            case (FigureNames.ROOK): s += \"r\"; break;\n                            case (FigureNames.PAWN): s += \"p\"; break;\n                        }\n                    } else {\n                        switch (target.figure.name) {\n                            case (FigureNames.BISHOP): s += \"B\"; break;\n                            case (FigureNames.KING): s += \"K\"; break;\n                            case (FigureNames.QUEEN): s += \"Q\"; break;\n                            case (FigureNames.KNIGHT): s += \"N\"; break;\n                            case (FigureNames.ROOK): s += \"R\"; break;\n                            case (FigureNames.PAWN): s += \"P\"; break;\n                        }\n                    }\n\n                } else {\n                    n++;\n                    if (j === row.length - 1) {\n                        s = s + n;\n                    }\n                }\n            }\n            boardSTR += s;\n            if (!(i === this.cells.length - 1)) {boardSTR += \"/\"}\n        }\n        boardSTR += \" \";\n        \n        let q: Cell = this.getCell(0, 0);\n        let Q: Cell = this.getCell(0, 7);\n        let k: Cell = this.getCell(7, 0);\n        let K: Cell = this.getCell(7, 7);\n        let king: Cell = this.getCell(4, 0);\n        let KING: Cell = this.getCell(4, 7);\n\n        let n: number = 0;\n\n        if(K && KING) {\n            if(K.figure?.isFirstStep && KING.figure?.isFirstStep) {\n                boardSTR += \"K\"; n++;\n            }\n        }\n        if(Q && KING) {\n            if(Q.figure?.isFirstStep && KING.figure?.isFirstStep) {\n                boardSTR += \"Q\"; n++;\n            }\n        }\n        if(k && king) {\n            if(k.figure?.isFirstStep && king.figure?.isFirstStep) {\n                boardSTR += \"k\"; n++;\n            }\n        }\n        if(q && king) {\n            if(q.figure?.isFirstStep && king.figure?.isFirstStep) {\n                boardSTR += \"q\"; n++;\n            }\n        }\n\n        if(n === 0) {boardSTR += \"-\";}\n\n        boardSTR += \" \";\n        return boardSTR;\n    }\n    \n    constructor(){\n        //this.highlightCells();\n    }\n\n    public getCell(x: number, y: number) { // возвращаем элемент ячейку\n        return this.cells[y][x]\n    }\n\n    private addPawns() {\n        for (let i = 0; i < 8; i++) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1))\n            new Pawn(Colors.WHITE, this.getCell(i, 6))\n        }\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(4, 0))\n        new King(Colors.WHITE, this.getCell(4, 7))\n    }\n\n    private addBishop() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0))\n        new Bishop(Colors.WHITE, this.getCell(2, 7))\n        new Bishop(Colors.BLACK, this.getCell(5, 0))\n        new Bishop(Colors.WHITE, this.getCell(5, 7))\n    }\n\n    private addKnight() {\n        new Knight(Colors.BLACK, this.getCell(1, 0))\n        new Knight(Colors.WHITE, this.getCell(1, 7))\n        new Knight(Colors.BLACK, this.getCell(6, 0))\n        new Knight(Colors.WHITE, this.getCell(6, 7))\n    }\n\n    private addQueen() {\n        new Queen(Colors.BLACK, this.getCell(3, 0))\n        new Queen(Colors.WHITE, this.getCell(3, 7))\n    }\n\n    private addRook() {\n        new Rook(Colors.BLACK, this.getCell(0, 0))\n        new Rook(Colors.WHITE, this.getCell(0, 7))\n        new Rook(Colors.BLACK, this.getCell(7, 0))\n        new Rook(Colors.WHITE, this.getCell(7, 7))\n    }\n\n    private addZnach() {\n        new Znach(\"1\", this.getCell(7, 7))\n    }\n\n    public addFigures() {\n        this.addBishop()\n        this.addKings()\n        this.addKnight()\n        this.addPawns()\n        this.addRook()\n        this.addQueen()\n        //this.addZnach()\n        this.addDebuts()\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}