{"ast":null,"code":"/*export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n    const url = 'http://localhost:8080/user'; // Замените на ваш локальный URL\n\n    const requestBody = {\n        login: login,\n        password: password,\n    };\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n\n        // Проверяем, был ли запрос успешным\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        const id = Number(data.id);\n\n        // Предполагаем, что в ответе есть поле id\n        console.log('aaaaaaaaaaa');\n        console.log(data.id);\n\n\n        return data.id; // Возвращаем id из ответа\n\n        \n    } catch (error) {\n        console.error('Error occurred during the POST request:', error);\n        return 0; // Возвращаем null в случае ошибки\n    }\n}\n\n// Пример вызова функции\nsendLoginRequest('yourLogin', 'yourPassword')\n    .then(id => {\n        if (id !== null) {\n            console.log('Received ID:', id);\n        } else {\n            console.log('Failed to retrieve ID.');\n        }\n    });\n\n\n    import axios from 'axios';\n\n    // Определяем интерфейс для ожидаемого ответа от сервера\n    interface ServerResponse {\n        id: number; // Предполагаем, что id – это число\n        // Вы можете добавить тут другие поля, если это необходимо\n        login: string,\n        password: string\n    }\n    \n    // Функция для отправки POST-запроса\n    export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n        const url = 'http://localhost:8080/user'; // Замените на ваш URL\n    \n        try {\n            // Отправка POST-запроса с данными\n            const response = await axios.post<ServerResponse>(url, {\n                login: login,\n                password: password,\n            });\n    \n            // Обрабатываем ответ и возвращаем id\n            console.log('aaaaaaaaaaa');\n            console.log(response.data.id);\n            return response.data.id;\n        } catch (error) {\n            // Обработка ошибок\n            console.error('Error sending the request:', error);\n            \n            // Возвращаем null в случае ошибки\n            return null;\n        }\n    }\n    */\n\nasync function postLogin(username, password) {\n  const url = 'http://localhost:3001/api/login'; // Укажите ваш URL\n\n  const requestBody = {\n    login: username,\n    password: password\n  };\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(requestBody)\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  const data = await response.json();\n  console.log('Received data:', data); // Проверяем, что сервер вернул\n\n  if (!data || typeof data.id === 'undefined') {\n    throw new Error('ID is missing from response');\n  }\n  const id = Number(data.id); // Приводим к числу\n  if (isNaN(id)) {\n    throw new Error('ID is not a valid number');\n  }\n  return id;\n}","map":{"version":3,"names":["postLogin","username","password","url","requestBody","login","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","id","Number","isNaN"],"sources":["/home/eva/Рабочий стол/reg/src/models/bek.ts"],"sourcesContent":["/*export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n    const url = 'http://localhost:8080/user'; // Замените на ваш локальный URL\n\n    const requestBody = {\n        login: login,\n        password: password,\n    };\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n\n        // Проверяем, был ли запрос успешным\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        const id = Number(data.id);\n\n        // Предполагаем, что в ответе есть поле id\n        console.log('aaaaaaaaaaa');\n        console.log(data.id);\n\n\n        return data.id; // Возвращаем id из ответа\n\n        \n    } catch (error) {\n        console.error('Error occurred during the POST request:', error);\n        return 0; // Возвращаем null в случае ошибки\n    }\n}\n\n// Пример вызова функции\nsendLoginRequest('yourLogin', 'yourPassword')\n    .then(id => {\n        if (id !== null) {\n            console.log('Received ID:', id);\n        } else {\n            console.log('Failed to retrieve ID.');\n        }\n    });\n\n\n    import axios from 'axios';\n\n    // Определяем интерфейс для ожидаемого ответа от сервера\n    interface ServerResponse {\n        id: number; // Предполагаем, что id – это число\n        // Вы можете добавить тут другие поля, если это необходимо\n        login: string,\n        password: string\n    }\n    \n    // Функция для отправки POST-запроса\n    export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n        const url = 'http://localhost:8080/user'; // Замените на ваш URL\n    \n        try {\n            // Отправка POST-запроса с данными\n            const response = await axios.post<ServerResponse>(url, {\n                login: login,\n                password: password,\n            });\n    \n            // Обрабатываем ответ и возвращаем id\n            console.log('aaaaaaaaaaa');\n            console.log(response.data.id);\n            return response.data.id;\n        } catch (error) {\n            // Обработка ошибок\n            console.error('Error sending the request:', error);\n            \n            // Возвращаем null в случае ошибки\n            return null;\n        }\n    }\n    */\n\n\n\n    async function postLogin(username: string, password: string): Promise<number> {\n        const url = 'http://localhost:3001/api/login'; // Укажите ваш URL\n    \n        const requestBody = {\n            login: username,\n            password: password,\n        };\n    \n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n    \n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n    \n        const data = await response.json();\n        console.log('Received data:', data); // Проверяем, что сервер вернул\n    \n        if (!data || typeof data.id === 'undefined') {\n            throw new Error('ID is missing from response');\n        }\n    \n        const id = Number(data.id); // Приводим к числу\n        if (isNaN(id)) {\n            throw new Error('ID is not a valid number');\n        }\n    \n        return id;\n    }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAII,eAAeA,SAASA,CAACC,QAAgB,EAAEC,QAAgB,EAAmB;EAC1E,MAAMC,GAAG,GAAG,iCAAiC,CAAC,CAAC;;EAE/C,MAAMC,WAAW,GAAG;IAChBC,KAAK,EAAEJ,QAAQ;IACfC,QAAQ,EAAEA;EACd,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;IAC9BK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;EACpC,CAAC,CAAC;EAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;EAC7D;EAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EAClCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,IAAI,CAAC,CAAC,CAAC;;EAErC,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,CAACI,EAAE,KAAK,WAAW,EAAE;IACzC,MAAM,IAAIN,KAAK,CAAC,6BAA6B,CAAC;EAClD;EAEA,MAAMM,EAAE,GAAGC,MAAM,CAACL,IAAI,CAACI,EAAE,CAAC,CAAC,CAAC;EAC5B,IAAIE,KAAK,CAACF,EAAE,CAAC,EAAE;IACX,MAAM,IAAIN,KAAK,CAAC,0BAA0B,CAAC;EAC/C;EAEA,OAAOM,EAAE;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}