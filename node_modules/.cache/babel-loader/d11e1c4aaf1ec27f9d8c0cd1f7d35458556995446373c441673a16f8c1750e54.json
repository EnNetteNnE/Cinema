{"ast":null,"code":"var _jsxFileName = \"/home/eva/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/reg/src/components/BoardComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CellComponent from './CellComponent';\nimport { Modes } from '../models/Modes';\nimport { Colors } from '../models/Colors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//FC указывает что это функциональный компонент\nconst BoardComponent = ({\n  board,\n  setBoard,\n  currentPlayer,\n  swapPlayer,\n  mod,\n  boards\n}) => {\n  _s();\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [boardEnd, setBoardEnd] = useState(null);\n\n  // состояние, функция которая изменяет состояние. Тип в состоянии или ячейка или нулл\n\n  function click(cell) {\n    var _selectedCell$figure;\n    // аргумент ячейка, на которую нажали\n    // если у нас есть выбранная ячейка, на которой стоит фигура,  \n    // и эта ячейка не равняется той на которую мы хотим нажать\n    // и кэн мув возвращает тру\n    if (selectedCell && selectedCell !== cell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) {\n      // если содержит фигуру\n      selectedCell.moveFigure(cell); // то двигаем фигурку\n      swapPlayer();\n      setSelectedCell(null); // меняем состояние\n      //updateBoard() // в видео он не нужен, а нам нужно обновить\n      //console.log(\"+++\")\n      //тут внимательно проверять очередность хода, если вызов функции переносить\n      board.Boards.push(cell.board);\n      let boardSTR = \"\";\n      boardSTR = cell.board.boardToString();\n      if ((currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color) === Colors.WHITE) {\n        boardSTR += \"b\";\n      } else {\n        boardSTR += \"w\";\n      }\n      console.log({\n        boardSTR\n      });\n      boards.push(boardSTR);\n    } else {\n      var _cell$figure;\n      if (((_cell$figure = cell.figure) === null || _cell$figure === void 0 ? void 0 : _cell$figure.color) === (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color)) {\n        setSelectedCell(cell);\n      }\n    }\n  }\n  useEffect(() => {\n    // чтобы реакт перерисовал компонент\n    highlightCells(); // вызывается на любое изменение ячейки\n  }, [selectedCell]);\n  function highlightCells() {\n    // выставление свойства аваэлибл, подсветка доступных ячеек\n    board.highlightCells(selectedCell); // подсветка необходимых ячеек\n    //board.highlightArrow(selectedCell)\n    updateBoard(); // перерисовываем доску\n  }\n  function updateBoard() {\n    // обновление состояния, при перерисовке доски вызывается\n    //board.highlightArrow(selectedCell)\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  }\n  const delet = () => {};\n  const back = () => {\n    console.log(board.Boards.length);\n    if (board.Boards.length > 1) {\n      board.Boards.pop();\n      const nBoard = board.Boards[0].getCopyBoard();\n      setBoard(nBoard);\n      //setSelectedCell(null);\n    }\n  };\n\n  //board.highlightArrow(selectedCell)\n  if (mod.mod === Modes.NULL || mod.mod === Modes.PLAY) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"choose\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0440\\u0435\\u0436\\u0438\\u043C \\u0438\\u0433\\u0440\\u044B \\u0438\\u043B\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0441\\u043E\\u0437\\u0434\\u0430\\u0439\\u0442\\u0435 \\u043D\\u043E\\u0432\\u044B\\u0439 \\u0434\\u0435\\u0431\\u044E\\u0442 (+)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0435\\u0439 \\u0438\\u0433\\u0440\\u043E\\u043A \", currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: board.cells.map((row, index) =>\n        /*#__PURE__*/\n        // индексом проходимся по ров индексами\n        //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n        _jsxDEV(React.Fragment, {\n          children: row.map(cell =>\n          /*#__PURE__*/\n          //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n          _jsxDEV(CellComponent, {\n            treehod: cell.isHod(),\n            click: click,\n            cell: cell\n\n            //z={cell.znach}\n            ,\n\n            // для элемента массива нужно указывать ключ\n            selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n            // если текущая и выбранная равны\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => delet(),\n        className: \"Delete\",\n        children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0442\\u0435\\u043A\\u0443\\u0449\\u0443\\u044E \\u0432\\u0435\\u0442\\u043A\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => back(),\n        className: \"Back\",\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(BoardComponent, \"tib70CHV+srwGYkMXyOy7l+JdmY=\");\n_c = BoardComponent;\nexport default BoardComponent;\nvar _c;\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useEffect","useState","CellComponent","Modes","Colors","jsxDEV","_jsxDEV","BoardComponent","board","setBoard","currentPlayer","swapPlayer","mod","boards","_s","selectedCell","setSelectedCell","boardEnd","setBoardEnd","click","cell","_selectedCell$figure","figure","canMove","moveFigure","Boards","push","boardSTR","boardToString","color","WHITE","console","log","_cell$figure","highlightCells","updateBoard","newBoard","getCopyBoard","delet","back","length","pop","nBoard","NULL","PLAY","className","children","fileName","_jsxFileName","lineNumber","columnNumber","cells","map","row","index","Fragment","treehod","isHod","selected","x","y","id","onClick","_c","$RefreshReg$"],"sources":["/home/eva/Рабочий стол/reg/src/components/BoardComponent.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport { Board } from '../models/Board';\nimport CellComponent from './CellComponent';\nimport { Cell } from '../models/Cell';\nimport { Player } from '../models/Player';\nimport { Modes } from '../models/Modes';\nimport { Mod } from '../models/Mod';\nimport DebutsMake from './DebutsMake';\nimport { Colors } from '../models/Colors';\n\n\ninterface BoardProps { //интерфейс ожидаемых пропсов\n    board: Board;\n    setBoard: (board: Board) => void; // функция которой можно изменить доску!!!!!!!!\n    currentPlayer: Player | null;\n    swapPlayer: () => void;\n    mod: Mod;\n    boards: string[];\n}\n\n//FC указывает что это функциональный компонент\nconst BoardComponent: FC<BoardProps> = ({board, setBoard, currentPlayer, swapPlayer, mod, boards}) => {\n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\n    const [boardEnd, setBoardEnd] = useState<Board | null>(null);\n\n    // состояние, функция которая изменяет состояние. Тип в состоянии или ячейка или нулл\n\n    function click(cell: Cell) { // аргумент ячейка, на которую нажали\n        // если у нас есть выбранная ячейка, на которой стоит фигура,  \n        // и эта ячейка не равняется той на которую мы хотим нажать\n        // и кэн мув возвращает тру\n        if (selectedCell && selectedCell !== cell && selectedCell.figure?.canMove(cell)) { // если содержит фигуру\n            selectedCell.moveFigure(cell); // то двигаем фигурку\n            swapPlayer()\n            setSelectedCell(null); // меняем состояние\n            //updateBoard() // в видео он не нужен, а нам нужно обновить\n            //console.log(\"+++\")\n            //тут внимательно проверять очередность хода, если вызов функции переносить\n            board.Boards.push(cell.board)\n            let boardSTR: string = \"\";\n            boardSTR = cell.board.boardToString();\n            if(currentPlayer?.color === Colors.WHITE) {boardSTR += \"b\"}\n            else {boardSTR += \"w\"}\n            console.log({boardSTR})\n            boards.push(boardSTR)\n        }\n        else {\n            if(cell.figure?.color === currentPlayer?.color) {\n                setSelectedCell(cell);\n            }     \n        }\n    }\n\n    \n    \n\n    useEffect(() => { // чтобы реакт перерисовал компонент\n        highlightCells() // вызывается на любое изменение ячейки\n    }, [selectedCell])\n\n    function highlightCells() { // выставление свойства аваэлибл, подсветка доступных ячеек\n        board.highlightCells(selectedCell) // подсветка необходимых ячеек\n        //board.highlightArrow(selectedCell)\n        updateBoard() // перерисовываем доску\n    }\n\n    function updateBoard() { // обновление состояния, при перерисовке доски вызывается\n        //board.highlightArrow(selectedCell)\n        const newBoard = board.getCopyBoard()\n        setBoard(newBoard)\n    }\n\n\n\n    const delet = () => {\n        \n    }\n\n    const back = () => {\n        console.log(board.Boards.length)\n        \n        if (board.Boards.length > 1) {\n            board.Boards.pop()\n            const nBoard: Board = board.Boards[0].getCopyBoard()\n            setBoard(nBoard)\n            //setSelectedCell(null);\n        }\n        \n    }\n\n    //board.highlightArrow(selectedCell)\n    if ((mod.mod === Modes.NULL) || (mod.mod === Modes.PLAY)) {\n        return ( \n        <div className='choose'>\n\n        <h1>Выберите режим игры или</h1>\n        <h1>создайте новый дебют (+)</h1>\n\n        </div> \n        );\n    }\n\n  return (\n    <div>\n        \n\n            <div>\n\n            <h3>Текущей игрок {currentPlayer?.color}</h3>\n            <div className=\"board\">\n                {board.cells.map((row, index) => // индексом проходимся по ров индексами\n                    //Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM\n                    <React.Fragment key={index}>\n                                \n                        {row.map(cell => //тк индекс это массив, по нему мы тоже итерируемся, и уже тут отрисовывем компонент ячейки, тут же передаем компонент пропсом\n                            <CellComponent\n                                treehod={cell.isHod()}\n                                click={click}\n                                cell={cell}\n                                \n                                //z={cell.znach}\n                                key={cell.id} // для элемента массива нужно указывать ключ\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\n                                // если текущая и выбранная равны\n                            />\n                        )}\n                    </React.Fragment>\n                )}\n            </div>\n            <button onClick={() => delet()} className=\"Delete\">Удалить текущую ветку</button>\n            <button onClick={() => back()} className=\"Back\">Назад</button>\n\n        </div>\n\n    \n\n    </div>\n  );\n};\n\nexport default BoardComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}