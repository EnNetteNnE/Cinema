{"ast":null,"code":"export async function sendLoginRequest(login, password) {\n  const url = 'http://localhost:8080/user'; // Замените на ваш локальный URL\n\n  const requestBody = {\n    login: login,\n    password: password\n  };\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    // Проверяем, был ли запрос успешным\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Предполагаем, что в ответе есть поле id\n    console.log('aaaaaaaaaaa');\n    console.log(data.id);\n    if (data.id == 0) {\n      return null;\n    } else {\n      return data.id; // Возвращаем id из ответа\n    }\n  } catch (error) {\n    console.error('Error occurred during the POST request:', error);\n    return null; // Возвращаем null в случае ошибки\n  }\n}\n/*\n// Пример вызова функции\nsendLoginRequest('yourLogin', 'yourPassword')\n    .then(id => {\n        if (id !== null) {\n            console.log('Received ID:', id);\n        } else {\n            console.log('Failed to retrieve ID.');\n        }\n    });\n\n\n    import axios from 'axios';\n\n    // Определяем интерфейс для ожидаемого ответа от сервера\n    interface ServerResponse {\n        id: number; // Предполагаем, что id – это число\n        // Вы можете добавить тут другие поля, если это необходимо\n        login: string,\n        password: string\n    }\n    \n    // Функция для отправки POST-запроса\n    export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n        const url = 'http://localhost:8080/user'; // Замените на ваш URL\n    \n        try {\n            // Отправка POST-запроса с данными\n            const response = await axios.post<ServerResponse>(url, {\n                login: login,\n                password: password,\n            });\n    \n            // Обрабатываем ответ и возвращаем id\n            console.log('aaaaaaaaaaa');\n            console.log(response.data.id);\n            return response.data.id;\n        } catch (error) {\n            // Обработка ошибок\n            console.error('Error sending the request:', error);\n            \n            // Возвращаем null в случае ошибки\n            return null;\n        }\n    }\n    */","map":{"version":3,"names":["sendLoginRequest","login","password","url","requestBody","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","id","error"],"sources":["/home/eva/Рабочий стол/reg/src/models/bek.ts"],"sourcesContent":["export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n    const url = 'http://localhost:8080/user'; // Замените на ваш локальный URL\n\n    const requestBody = {\n        login: login,\n        password: password,\n    };\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n\n        // Проверяем, был ли запрос успешным\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // Предполагаем, что в ответе есть поле id\n        console.log('aaaaaaaaaaa');\n        console.log(data.id);\n\n        if (data.id == 0) {\n            return null;\n        } else {\n            return data.id; // Возвращаем id из ответа\n        }\n        \n    } catch (error) {\n        console.error('Error occurred during the POST request:', error);\n        return null; // Возвращаем null в случае ошибки\n    }\n}\n/*\n// Пример вызова функции\nsendLoginRequest('yourLogin', 'yourPassword')\n    .then(id => {\n        if (id !== null) {\n            console.log('Received ID:', id);\n        } else {\n            console.log('Failed to retrieve ID.');\n        }\n    });\n\n\n    import axios from 'axios';\n\n    // Определяем интерфейс для ожидаемого ответа от сервера\n    interface ServerResponse {\n        id: number; // Предполагаем, что id – это число\n        // Вы можете добавить тут другие поля, если это необходимо\n        login: string,\n        password: string\n    }\n    \n    // Функция для отправки POST-запроса\n    export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n        const url = 'http://localhost:8080/user'; // Замените на ваш URL\n    \n        try {\n            // Отправка POST-запроса с данными\n            const response = await axios.post<ServerResponse>(url, {\n                login: login,\n                password: password,\n            });\n    \n            // Обрабатываем ответ и возвращаем id\n            console.log('aaaaaaaaaaa');\n            console.log(response.data.id);\n            return response.data.id;\n        } catch (error) {\n            // Обработка ошибок\n            console.error('Error sending the request:', error);\n            \n            // Возвращаем null в случае ошибки\n            return null;\n        }\n    }\n    */\n"],"mappings":"AAAA,OAAO,eAAeA,gBAAgBA,CAACC,KAAa,EAAEC,QAAgB,EAA0B;EAC5F,MAAMC,GAAG,GAAG,4BAA4B,CAAC,CAAC;;EAE1C,MAAMC,WAAW,GAAG;IAChBH,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA;EACd,CAAC;EAED,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;MAC9BI,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IACpC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;IAC7D;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;;IAElC;IACAC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BD,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,EAAE,CAAC;IAEpB,IAAIJ,IAAI,CAACI,EAAE,IAAI,CAAC,EAAE;MACd,OAAO,IAAI;IACf,CAAC,MAAM;MACH,OAAOJ,IAAI,CAACI,EAAE,CAAC,CAAC;IACpB;EAEJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D,OAAO,IAAI,CAAC,CAAC;EACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}