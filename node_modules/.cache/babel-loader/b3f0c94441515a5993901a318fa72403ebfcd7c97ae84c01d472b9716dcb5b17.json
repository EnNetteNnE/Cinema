{"ast":null,"code":"export class Cell {\n  // для реакт ключей\n\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    // Можешь ли переместиться\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.board = board;\n    this.available = false;\n    this.id = Math.random();\n  }\n  isEmpty() {\n    return this.figure === null;\n  }\n  isEnemy(target) {}\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n    for (let y = min + 1; y < max; y++) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) {\n      return false;\n    }\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n    for (let x = min + 1; x < max; x++) {\n      if (!this.board.getCell(x, this.y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(target.x - this.x);\n    const absY = Math.abs(target.y - this.y);\n    if (absY !== absX) return false;\n    const dy = this.y < target.y ? 1 : -1;\n    const dx = this.x < target.x ? 1 : -1;\n    for (let i = 1; i < absY; i++) {\n      if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) return false;\n    }\n    return true;\n  }\n  setFigure(figure) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n  moveFigure(target) {\n    var _this$figure;\n    if (this.figure && (_this$figure = this.figure) !== null && _this$figure !== void 0 && _this$figure.canMove(target)) {\n      this.figure.moveFigure(target);\n      target.setFigure(this.figure);\n      this.figure = null;\n    }\n  }\n}","map":{"version":3,"names":["Cell","constructor","board","x","y","color","figure","available","id","Math","random","isEmpty","isEnemy","target","isEmptyVertical","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dy","dx","i","setFigure","cell","moveFigure","_this$figure","canMove"],"sources":["/home/eva/Рабочий стол/chess-app/src/models/Cell.ts"],"sourcesContent":["import { Board } from \"./Board\";\nimport { Colors } from \"./Colors\";\nimport { Figure } from \"./figures/Figure\";\n\nexport class Cell {\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    figure: Figure | null;\n    board: Board;\n    available: boolean; // Можешь ли переместиться\n    id: number; // для реакт ключей\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.figure = figure;\n        this.board = board;\n        this.available = false;\n        this.id = Math.random()\n    }\n\n    isEmpty(): boolean {\n        return this.figure === null;\n    }\n\n    isEnemy(target: Cell): boolean {\n\n    }\n\n    isEmptyVertical(target: Cell): boolean {\n        if(this.x !== target.x) {\n            return false;\n        }\n\n        const min = Math.min(this.y, target.y);\n        const max = Math.max(this.y, target.y);\n        for(let y = min + 1; y < max; y++) {\n            if(!this.board.getCell(this.x, y).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isEmptyHorizontal(target: Cell): boolean {\n        if(this.y !== target.y) {\n            return false;\n        }\n\n        const min = Math.min(this.x, target.x);\n        const max = Math.max(this.x, target.x);\n        for(let x = min + 1; x < max; x++) {\n            if(!this.board.getCell(x, this.y).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isEmptyDiagonal(target: Cell): boolean {\n        const absX = Math.abs(target.x - this.x);\n        const absY = Math.abs(target.y - this.y);\n        if(absY !== absX)\n            return false;\n\n        const dy = this.y < target.y ? 1 : -1\n        const dx = this.x < target.x ? 1 : -1\n\n        for(let i = 1; i < absY; i++) {\n            if(!this.board.getCell(this.x + dx*i, this.y + dy*i).isEmpty())\n                return false;\n        }\n        return true;\n    }\n\n    setFigure(figure: Figure) {\n        this.figure = figure;\n        this.figure.cell = this;\n    }\n\n    moveFigure(target: Cell) {\n        if(this.figure && this.figure?.canMove(target)) {\n            this.figure.moveFigure(target)\n            target.setFigure(this.figure);\n            this.figure = null;\n        }\n    }\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}