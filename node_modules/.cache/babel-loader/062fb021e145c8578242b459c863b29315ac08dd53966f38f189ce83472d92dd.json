{"ast":null,"code":"/*export async function sendLoginRequest(login: string, password: string, user: object): Promise<number | null> {\n    const url = 'http://localhost:8080/user'; // Замените на ваш локальный URL\n\n    const requestBody = {\n        login: login,\n        password: password,\n    };\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n\n        // Проверяем, был ли запрос успешным\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        const id = Number(data.id);\n\n        // Предполагаем, что в ответе есть поле id\n        console.log('aaaaaaaaaaa');\n        console.log(data.id);\n\n\n        return data.id; // Возвращаем id из ответа\n\n        \n    } catch (error) {\n        console.error('Error occurred during the POST request:', error);\n        return 0; // Возвращаем null в случае ошибки\n    }\n}\n\n// Пример вызова функции\nsendLoginRequest('yourLogin', 'yourPassword')\n    .then(id => {\n        if (id !== null) {\n            console.log('Received ID:', id);\n        } else {\n            console.log('Failed to retrieve ID.');\n        }\n    });\n\n\n    import axios from 'axios';\n\n    // Определяем интерфейс для ожидаемого ответа от сервера\n    interface ServerResponse {\n        id: number; // Предполагаем, что id – это число\n        // Вы можете добавить тут другие поля, если это необходимо\n        login: string,\n        password: string\n    }\n    \n    // Функция для отправки POST-запроса\n    export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n        const url = 'http://localhost:8080/user'; // Замените на ваш URL\n    \n        try {\n            // Отправка POST-запроса с данными\n            const response = await axios.post<ServerResponse>(url, {\n                login: login,\n                password: password,\n            });\n    \n            // Обрабатываем ответ и возвращаем id\n            console.log('aaaaaaaaaaa');\n            console.log(response.data.id);\n            return response.data.id;\n        } catch (error) {\n            // Обработка ошибок\n            console.error('Error sending the request:', error);\n            \n            // Возвращаем null в случае ошибки\n            return null;\n        }\n    }\n \n\n\n\n    export async function sendLoginRequest(username: string, password: string): Promise<number> {\n        const url = 'http://localhost:8080/user'; // Укажите ваш URL\n    \n        const requestBody = {\n            login: username,\n            password: password,\n        };\n    \n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n    \n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n    \n        const data = await response.json();\n        console.log('Received data:', data); // Проверяем, что сервер вернул\n    \n        if (!data || typeof data.id === 'undefined') {\n            throw new Error('ID is missing from response');\n        }\n    \n        const id = Number(data.id); // Приводим к числу\n        if (isNaN(id)) {\n            throw new Error('ID is not a valid number');\n        }\n    \n        return id;}\n   */\n\nexport function sendPostRequest(login, password) {\n  const xhr = new XMLHttpRequest();\n  const url = 'http://localhost:8080/user'; // Замените на ваш URL\n\n  const requestBody = {\n    login: login,\n    password: password\n  };\n\n  // Создаем объект с данными для отправки\n  const data = JSON.stringify(requestBody);\n\n  // Инициализируем запрос\n  xhr.open('POST', url, false); // false делает запрос синхронным\n\n  // Устанавливаем заголовок для отправки JSON\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  // Отправляем запрос\n  xhr.send(data);\n\n  // Проверяем статус ответа\n  if (true) {\n    // Парсим ответ в JSON\n    const response = JSON.parse(xhr.responseText);\n    // Возвращаем значение поля id\n\n    console.log('aaaaaaaaaaa');\n    console.log(response.data.id);\n    return response.id; // Предполагается, что id - это число\n  } else {\n    // Обработка ошибок, если необходимо\n    throw new Error(`Request failed with status: ${xhr.status}`);\n  }\n}\n/*\n    // Пример использования\n    try {\n        const userId = sendPostRequest('myLogin', 'myPassword');\n        console.log('User  ID:', userId);\n    } catch (error) {\n        console.error(error);\n    }\n*/","map":{"version":3,"names":["sendPostRequest","login","password","xhr","XMLHttpRequest","url","requestBody","data","JSON","stringify","open","setRequestHeader","send","response","parse","responseText","console","log","id","Error","status"],"sources":["/home/eva/Рабочий стол/reg/src/models/bek.ts"],"sourcesContent":["/*export async function sendLoginRequest(login: string, password: string, user: object): Promise<number | null> {\n    const url = 'http://localhost:8080/user'; // Замените на ваш локальный URL\n\n    const requestBody = {\n        login: login,\n        password: password,\n    };\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n\n        // Проверяем, был ли запрос успешным\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        const id = Number(data.id);\n\n        // Предполагаем, что в ответе есть поле id\n        console.log('aaaaaaaaaaa');\n        console.log(data.id);\n\n\n        return data.id; // Возвращаем id из ответа\n\n        \n    } catch (error) {\n        console.error('Error occurred during the POST request:', error);\n        return 0; // Возвращаем null в случае ошибки\n    }\n}\n\n// Пример вызова функции\nsendLoginRequest('yourLogin', 'yourPassword')\n    .then(id => {\n        if (id !== null) {\n            console.log('Received ID:', id);\n        } else {\n            console.log('Failed to retrieve ID.');\n        }\n    });\n\n\n    import axios from 'axios';\n\n    // Определяем интерфейс для ожидаемого ответа от сервера\n    interface ServerResponse {\n        id: number; // Предполагаем, что id – это число\n        // Вы можете добавить тут другие поля, если это необходимо\n        login: string,\n        password: string\n    }\n    \n    // Функция для отправки POST-запроса\n    export async function sendLoginRequest(login: string, password: string): Promise<number | null> {\n        const url = 'http://localhost:8080/user'; // Замените на ваш URL\n    \n        try {\n            // Отправка POST-запроса с данными\n            const response = await axios.post<ServerResponse>(url, {\n                login: login,\n                password: password,\n            });\n    \n            // Обрабатываем ответ и возвращаем id\n            console.log('aaaaaaaaaaa');\n            console.log(response.data.id);\n            return response.data.id;\n        } catch (error) {\n            // Обработка ошибок\n            console.error('Error sending the request:', error);\n            \n            // Возвращаем null в случае ошибки\n            return null;\n        }\n    }\n \n\n\n\n    export async function sendLoginRequest(username: string, password: string): Promise<number> {\n        const url = 'http://localhost:8080/user'; // Укажите ваш URL\n    \n        const requestBody = {\n            login: username,\n            password: password,\n        };\n    \n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n    \n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n    \n        const data = await response.json();\n        console.log('Received data:', data); // Проверяем, что сервер вернул\n    \n        if (!data || typeof data.id === 'undefined') {\n            throw new Error('ID is missing from response');\n        }\n    \n        const id = Number(data.id); // Приводим к числу\n        if (isNaN(id)) {\n            throw new Error('ID is not a valid number');\n        }\n    \n        return id;}\n   */    \n\n\n        export function sendPostRequest(login: string, password: string): number {\n            const xhr = new XMLHttpRequest();\n            const url = 'http://localhost:8080/user'; // Замените на ваш URL\n\n            const requestBody = {\n                login: login,\n                password: password,\n            };\n        \n            // Создаем объект с данными для отправки\n            const data = JSON.stringify(requestBody);\n        \n            // Инициализируем запрос\n            xhr.open('POST', url, false); // false делает запрос синхронным\n        \n            // Устанавливаем заголовок для отправки JSON\n            xhr.setRequestHeader('Content-Type', 'application/json');\n        \n            // Отправляем запрос\n            xhr.send(data);\n        \n            // Проверяем статус ответа\n            if (true) {\n                // Парсим ответ в JSON\n                const response = JSON.parse(xhr.responseText);\n                // Возвращаем значение поля id\n\n                console.log('aaaaaaaaaaa');\n                console.log(response.data.id);\n\n                return response.id; // Предполагается, что id - это число\n            } else {\n                // Обработка ошибок, если необходимо\n                throw new Error(`Request failed with status: ${xhr.status}`);\n            }\n        }\n    /*\n        // Пример использования\n        try {\n            const userId = sendPostRequest('myLogin', 'myPassword');\n            console.log('User  ID:', userId);\n        } catch (error) {\n            console.error(error);\n        }\n    */"],"mappingseAAeA,CAACC,KAAa,EAAEC,QAAgB,EAAU;EACrE,MAAMC,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;EAChC,MAAMC,GAAG,GAAG,4BAA4B,CAAC,CAAC;;EAE1C,MAAMC,WAAW,GAAG;IAChBL,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA;EACd,CAAC;;EAED;EACA,MAAMK,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,WAAW,CAAC;;EAExC;EACAH,GAAG,CAACO,IAAI,CAAC,MAAM,EAAEL,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;;EAE9B;EACAF,GAAG,CAACQ,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC;;EAExD;EACAR,GAAG,CAACS,IAAI,CAACL,IAAI,CAAC;;EAEd;EACA,IAAI,IAAI,EAAE;IACN;IACA,MAAMM,QAAQ,GAAGL,IAAI,CAACM,KAAK,CAACX,GAAG,CAACY,YAAY,CAAC;IAC7C;;IAEAC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BD,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACN,IAAI,CAACW,EAAE,CAAC;IAE7B,OAAOL,QAAQ,CAACK,EAAE,CAAC,CAAC;EACxB,CAAC,MAAM;IACH;IACA,MAAM,IAAIC,KAAK,CAAC,+BAA+BhB,GAAG,CAACiB,MAAM,EAAE,CAAC;EAChE;AACJ;AACJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}